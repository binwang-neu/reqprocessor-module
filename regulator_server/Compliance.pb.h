// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Compliance.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_Compliance_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_Compliance_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3015000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3015002 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_Compliance_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_Compliance_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[8]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_Compliance_2eproto;
::PROTOBUF_NAMESPACE_ID::Metadata descriptor_table_Compliance_2eproto_metadata_getter(int index);
namespace request_proto {
class Binding;
struct BindingDefaultTypeInternal;
extern BindingDefaultTypeInternal _Binding_default_instance_;
class CProof;
struct CProofDefaultTypeInternal;
extern CProofDefaultTypeInternal _CProof_default_instance_;
class Data;
struct DataDefaultTypeInternal;
extern DataDefaultTypeInternal _Data_default_instance_;
class Rule;
struct RuleDefaultTypeInternal;
extern RuleDefaultTypeInternal _Rule_default_instance_;
class TransactionInfo;
struct TransactionInfoDefaultTypeInternal;
extern TransactionInfoDefaultTypeInternal _TransactionInfo_default_instance_;
class TxWriteSet;
struct TxWriteSetDefaultTypeInternal;
extern TxWriteSetDefaultTypeInternal _TxWriteSet_default_instance_;
class Version;
struct VersionDefaultTypeInternal;
extern VersionDefaultTypeInternal _Version_default_instance_;
class Wset;
struct WsetDefaultTypeInternal;
extern WsetDefaultTypeInternal _Wset_default_instance_;
}  // namespace request_proto
PROTOBUF_NAMESPACE_OPEN
template<> ::request_proto::Binding* Arena::CreateMaybeMessage<::request_proto::Binding>(Arena*);
template<> ::request_proto::CProof* Arena::CreateMaybeMessage<::request_proto::CProof>(Arena*);
template<> ::request_proto::Data* Arena::CreateMaybeMessage<::request_proto::Data>(Arena*);
template<> ::request_proto::Rule* Arena::CreateMaybeMessage<::request_proto::Rule>(Arena*);
template<> ::request_proto::TransactionInfo* Arena::CreateMaybeMessage<::request_proto::TransactionInfo>(Arena*);
template<> ::request_proto::TxWriteSet* Arena::CreateMaybeMessage<::request_proto::TxWriteSet>(Arena*);
template<> ::request_proto::Version* Arena::CreateMaybeMessage<::request_proto::Version>(Arena*);
template<> ::request_proto::Wset* Arena::CreateMaybeMessage<::request_proto::Wset>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace request_proto {

enum CProof_CSTATE : int {
  CProof_CSTATE_SATISFIED = 0,
  CProof_CSTATE_UNSATISFIED = 1,
  CProof_CSTATE_CProof_CSTATE_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  CProof_CSTATE_CProof_CSTATE_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool CProof_CSTATE_IsValid(int value);
constexpr CProof_CSTATE CProof_CSTATE_CSTATE_MIN = CProof_CSTATE_SATISFIED;
constexpr CProof_CSTATE CProof_CSTATE_CSTATE_MAX = CProof_CSTATE_UNSATISFIED;
constexpr int CProof_CSTATE_CSTATE_ARRAYSIZE = CProof_CSTATE_CSTATE_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CProof_CSTATE_descriptor();
template<typename T>
inline const std::string& CProof_CSTATE_Name(T enum_t_value) {
  static_assert(::std::is_same<T, CProof_CSTATE>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function CProof_CSTATE_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    CProof_CSTATE_descriptor(), enum_t_value);
}
inline bool CProof_CSTATE_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, CProof_CSTATE* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<CProof_CSTATE>(
    CProof_CSTATE_descriptor(), name, value);
}
enum Data_SOURCE : int {
  Data_SOURCE_WS = 0,
  Data_SOURCE_ON = 1,
  Data_SOURCE_OFF = 2,
  Data_SOURCE_Data_SOURCE_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  Data_SOURCE_Data_SOURCE_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool Data_SOURCE_IsValid(int value);
constexpr Data_SOURCE Data_SOURCE_SOURCE_MIN = Data_SOURCE_WS;
constexpr Data_SOURCE Data_SOURCE_SOURCE_MAX = Data_SOURCE_OFF;
constexpr int Data_SOURCE_SOURCE_ARRAYSIZE = Data_SOURCE_SOURCE_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Data_SOURCE_descriptor();
template<typename T>
inline const std::string& Data_SOURCE_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Data_SOURCE>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Data_SOURCE_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Data_SOURCE_descriptor(), enum_t_value);
}
inline bool Data_SOURCE_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Data_SOURCE* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Data_SOURCE>(
    Data_SOURCE_descriptor(), name, value);
}
// ===================================================================

class CProof PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:request_proto.CProof) */ {
 public:
  inline CProof() : CProof(nullptr) {}
  virtual ~CProof();
  explicit constexpr CProof(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CProof(const CProof& from);
  CProof(CProof&& from) noexcept
    : CProof() {
    *this = ::std::move(from);
  }

  inline CProof& operator=(const CProof& from) {
    CopyFrom(from);
    return *this;
  }
  inline CProof& operator=(CProof&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CProof& default_instance() {
    return *internal_default_instance();
  }
  static inline const CProof* internal_default_instance() {
    return reinterpret_cast<const CProof*>(
               &_CProof_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(CProof& a, CProof& b) {
    a.Swap(&b);
  }
  inline void Swap(CProof* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CProof* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CProof* New() const final {
    return CreateMaybeMessage<CProof>(nullptr);
  }

  CProof* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CProof>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CProof& from);
  void MergeFrom(const CProof& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CProof* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "request_proto.CProof";
  }
  protected:
  explicit CProof(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_Compliance_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  typedef CProof_CSTATE CSTATE;
  static constexpr CSTATE SATISFIED =
    CProof_CSTATE_SATISFIED;
  static constexpr CSTATE UNSATISFIED =
    CProof_CSTATE_UNSATISFIED;
  static inline bool CSTATE_IsValid(int value) {
    return CProof_CSTATE_IsValid(value);
  }
  static constexpr CSTATE CSTATE_MIN =
    CProof_CSTATE_CSTATE_MIN;
  static constexpr CSTATE CSTATE_MAX =
    CProof_CSTATE_CSTATE_MAX;
  static constexpr int CSTATE_ARRAYSIZE =
    CProof_CSTATE_CSTATE_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  CSTATE_descriptor() {
    return CProof_CSTATE_descriptor();
  }
  template<typename T>
  static inline const std::string& CSTATE_Name(T enum_t_value) {
    static_assert(::std::is_same<T, CSTATE>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function CSTATE_Name.");
    return CProof_CSTATE_Name(enum_t_value);
  }
  static inline bool CSTATE_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      CSTATE* value) {
    return CProof_CSTATE_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kInputsFieldNumber = 2,
    kStatusFieldNumber = 3,
    kRulesFieldNumber = 6,
    kDatasFieldNumber = 7,
    kQueryFieldNumber = 13,
    kTxIdFieldNumber = 1,
    kWorldstateHashFieldNumber = 4,
    kFuncNameFieldNumber = 8,
    kPeerSignatureFieldNumber = 9,
    kTeePkFieldNumber = 10,
    kTeeSignatureFieldNumber = 11,
    kPeerCertFieldNumber = 12,
    kBindingFieldNumber = 5,
  };
  // repeated string inputs = 2;
  int inputs_size() const;
  private:
  int _internal_inputs_size() const;
  public:
  void clear_inputs();
  const std::string& inputs(int index) const;
  std::string* mutable_inputs(int index);
  void set_inputs(int index, const std::string& value);
  void set_inputs(int index, std::string&& value);
  void set_inputs(int index, const char* value);
  void set_inputs(int index, const char* value, size_t size);
  std::string* add_inputs();
  void add_inputs(const std::string& value);
  void add_inputs(std::string&& value);
  void add_inputs(const char* value);
  void add_inputs(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& inputs() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_inputs();
  private:
  const std::string& _internal_inputs(int index) const;
  std::string* _internal_add_inputs();
  public:

  // repeated .request_proto.CProof.CSTATE status = 3;
  int status_size() const;
  private:
  int _internal_status_size() const;
  public:
  void clear_status();
  private:
  ::request_proto::CProof_CSTATE _internal_status(int index) const;
  void _internal_add_status(::request_proto::CProof_CSTATE value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* _internal_mutable_status();
  public:
  ::request_proto::CProof_CSTATE status(int index) const;
  void set_status(int index, ::request_proto::CProof_CSTATE value);
  void add_status(::request_proto::CProof_CSTATE value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>& status() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* mutable_status();

  // repeated .request_proto.Rule rules = 6;
  int rules_size() const;
  private:
  int _internal_rules_size() const;
  public:
  void clear_rules();
  ::request_proto::Rule* mutable_rules(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::request_proto::Rule >*
      mutable_rules();
  private:
  const ::request_proto::Rule& _internal_rules(int index) const;
  ::request_proto::Rule* _internal_add_rules();
  public:
  const ::request_proto::Rule& rules(int index) const;
  ::request_proto::Rule* add_rules();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::request_proto::Rule >&
      rules() const;

  // repeated .request_proto.Data datas = 7;
  int datas_size() const;
  private:
  int _internal_datas_size() const;
  public:
  void clear_datas();
  ::request_proto::Data* mutable_datas(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::request_proto::Data >*
      mutable_datas();
  private:
  const ::request_proto::Data& _internal_datas(int index) const;
  ::request_proto::Data* _internal_add_datas();
  public:
  const ::request_proto::Data& datas(int index) const;
  ::request_proto::Data* add_datas();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::request_proto::Data >&
      datas() const;

  // repeated string query = 13;
  int query_size() const;
  private:
  int _internal_query_size() const;
  public:
  void clear_query();
  const std::string& query(int index) const;
  std::string* mutable_query(int index);
  void set_query(int index, const std::string& value);
  void set_query(int index, std::string&& value);
  void set_query(int index, const char* value);
  void set_query(int index, const char* value, size_t size);
  std::string* add_query();
  void add_query(const std::string& value);
  void add_query(std::string&& value);
  void add_query(const char* value);
  void add_query(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& query() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_query();
  private:
  const std::string& _internal_query(int index) const;
  std::string* _internal_add_query();
  public:

  // string tx_id = 1;
  void clear_tx_id();
  const std::string& tx_id() const;
  void set_tx_id(const std::string& value);
  void set_tx_id(std::string&& value);
  void set_tx_id(const char* value);
  void set_tx_id(const char* value, size_t size);
  std::string* mutable_tx_id();
  std::string* release_tx_id();
  void set_allocated_tx_id(std::string* tx_id);
  private:
  const std::string& _internal_tx_id() const;
  void _internal_set_tx_id(const std::string& value);
  std::string* _internal_mutable_tx_id();
  public:

  // string worldstate_hash = 4;
  void clear_worldstate_hash();
  const std::string& worldstate_hash() const;
  void set_worldstate_hash(const std::string& value);
  void set_worldstate_hash(std::string&& value);
  void set_worldstate_hash(const char* value);
  void set_worldstate_hash(const char* value, size_t size);
  std::string* mutable_worldstate_hash();
  std::string* release_worldstate_hash();
  void set_allocated_worldstate_hash(std::string* worldstate_hash);
  private:
  const std::string& _internal_worldstate_hash() const;
  void _internal_set_worldstate_hash(const std::string& value);
  std::string* _internal_mutable_worldstate_hash();
  public:

  // string func_name = 8;
  void clear_func_name();
  const std::string& func_name() const;
  void set_func_name(const std::string& value);
  void set_func_name(std::string&& value);
  void set_func_name(const char* value);
  void set_func_name(const char* value, size_t size);
  std::string* mutable_func_name();
  std::string* release_func_name();
  void set_allocated_func_name(std::string* func_name);
  private:
  const std::string& _internal_func_name() const;
  void _internal_set_func_name(const std::string& value);
  std::string* _internal_mutable_func_name();
  public:

  // string peer_signature = 9;
  void clear_peer_signature();
  const std::string& peer_signature() const;
  void set_peer_signature(const std::string& value);
  void set_peer_signature(std::string&& value);
  void set_peer_signature(const char* value);
  void set_peer_signature(const char* value, size_t size);
  std::string* mutable_peer_signature();
  std::string* release_peer_signature();
  void set_allocated_peer_signature(std::string* peer_signature);
  private:
  const std::string& _internal_peer_signature() const;
  void _internal_set_peer_signature(const std::string& value);
  std::string* _internal_mutable_peer_signature();
  public:

  // string tee_pk = 10;
  void clear_tee_pk();
  const std::string& tee_pk() const;
  void set_tee_pk(const std::string& value);
  void set_tee_pk(std::string&& value);
  void set_tee_pk(const char* value);
  void set_tee_pk(const char* value, size_t size);
  std::string* mutable_tee_pk();
  std::string* release_tee_pk();
  void set_allocated_tee_pk(std::string* tee_pk);
  private:
  const std::string& _internal_tee_pk() const;
  void _internal_set_tee_pk(const std::string& value);
  std::string* _internal_mutable_tee_pk();
  public:

  // string tee_signature = 11;
  void clear_tee_signature();
  const std::string& tee_signature() const;
  void set_tee_signature(const std::string& value);
  void set_tee_signature(std::string&& value);
  void set_tee_signature(const char* value);
  void set_tee_signature(const char* value, size_t size);
  std::string* mutable_tee_signature();
  std::string* release_tee_signature();
  void set_allocated_tee_signature(std::string* tee_signature);
  private:
  const std::string& _internal_tee_signature() const;
  void _internal_set_tee_signature(const std::string& value);
  std::string* _internal_mutable_tee_signature();
  public:

  // string peer_cert = 12;
  void clear_peer_cert();
  const std::string& peer_cert() const;
  void set_peer_cert(const std::string& value);
  void set_peer_cert(std::string&& value);
  void set_peer_cert(const char* value);
  void set_peer_cert(const char* value, size_t size);
  std::string* mutable_peer_cert();
  std::string* release_peer_cert();
  void set_allocated_peer_cert(std::string* peer_cert);
  private:
  const std::string& _internal_peer_cert() const;
  void _internal_set_peer_cert(const std::string& value);
  std::string* _internal_mutable_peer_cert();
  public:

  // .request_proto.Binding binding = 5;
  bool has_binding() const;
  private:
  bool _internal_has_binding() const;
  public:
  void clear_binding();
  const ::request_proto::Binding& binding() const;
  ::request_proto::Binding* release_binding();
  ::request_proto::Binding* mutable_binding();
  void set_allocated_binding(::request_proto::Binding* binding);
  private:
  const ::request_proto::Binding& _internal_binding() const;
  ::request_proto::Binding* _internal_mutable_binding();
  public:
  void unsafe_arena_set_allocated_binding(
      ::request_proto::Binding* binding);
  ::request_proto::Binding* unsafe_arena_release_binding();

  // @@protoc_insertion_point(class_scope:request_proto.CProof)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> inputs_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int> status_;
  mutable std::atomic<int> _status_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::request_proto::Rule > rules_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::request_proto::Data > datas_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> query_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr tx_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr worldstate_hash_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr func_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr peer_signature_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr tee_pk_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr tee_signature_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr peer_cert_;
  ::request_proto::Binding* binding_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Compliance_2eproto;
};
// -------------------------------------------------------------------

class Binding PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:request_proto.Binding) */ {
 public:
  inline Binding() : Binding(nullptr) {}
  virtual ~Binding();
  explicit constexpr Binding(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Binding(const Binding& from);
  Binding(Binding&& from) noexcept
    : Binding() {
    *this = ::std::move(from);
  }

  inline Binding& operator=(const Binding& from) {
    CopyFrom(from);
    return *this;
  }
  inline Binding& operator=(Binding&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Binding& default_instance() {
    return *internal_default_instance();
  }
  static inline const Binding* internal_default_instance() {
    return reinterpret_cast<const Binding*>(
               &_Binding_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Binding& a, Binding& b) {
    a.Swap(&b);
  }
  inline void Swap(Binding* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Binding* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Binding* New() const final {
    return CreateMaybeMessage<Binding>(nullptr);
  }

  Binding* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Binding>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Binding& from);
  void MergeFrom(const Binding& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Binding* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "request_proto.Binding";
  }
  protected:
  explicit Binding(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_Compliance_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kVersionFieldNumber = 3,
  };
  // string id = 1;
  void clear_id();
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // string version = 3;
  void clear_version();
  const std::string& version() const;
  void set_version(const std::string& value);
  void set_version(std::string&& value);
  void set_version(const char* value);
  void set_version(const char* value, size_t size);
  std::string* mutable_version();
  std::string* release_version();
  void set_allocated_version(std::string* version);
  private:
  const std::string& _internal_version() const;
  void _internal_set_version(const std::string& value);
  std::string* _internal_mutable_version();
  public:

  // @@protoc_insertion_point(class_scope:request_proto.Binding)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr version_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Compliance_2eproto;
};
// -------------------------------------------------------------------

class Rule PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:request_proto.Rule) */ {
 public:
  inline Rule() : Rule(nullptr) {}
  virtual ~Rule();
  explicit constexpr Rule(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Rule(const Rule& from);
  Rule(Rule&& from) noexcept
    : Rule() {
    *this = ::std::move(from);
  }

  inline Rule& operator=(const Rule& from) {
    CopyFrom(from);
    return *this;
  }
  inline Rule& operator=(Rule&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Rule& default_instance() {
    return *internal_default_instance();
  }
  static inline const Rule* internal_default_instance() {
    return reinterpret_cast<const Rule*>(
               &_Rule_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Rule& a, Rule& b) {
    a.Swap(&b);
  }
  inline void Swap(Rule* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Rule* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Rule* New() const final {
    return CreateMaybeMessage<Rule>(nullptr);
  }

  Rule* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Rule>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Rule& from);
  void MergeFrom(const Rule& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Rule* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "request_proto.Rule";
  }
  protected:
  explicit Rule(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_Compliance_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRuleFileFieldNumber = 1,
    kRuleIndexFieldNumber = 2,
    kVersionFieldNumber = 3,
  };
  // string rule_file = 1;
  void clear_rule_file();
  const std::string& rule_file() const;
  void set_rule_file(const std::string& value);
  void set_rule_file(std::string&& value);
  void set_rule_file(const char* value);
  void set_rule_file(const char* value, size_t size);
  std::string* mutable_rule_file();
  std::string* release_rule_file();
  void set_allocated_rule_file(std::string* rule_file);
  private:
  const std::string& _internal_rule_file() const;
  void _internal_set_rule_file(const std::string& value);
  std::string* _internal_mutable_rule_file();
  public:

  // string rule_index = 2;
  void clear_rule_index();
  const std::string& rule_index() const;
  void set_rule_index(const std::string& value);
  void set_rule_index(std::string&& value);
  void set_rule_index(const char* value);
  void set_rule_index(const char* value, size_t size);
  std::string* mutable_rule_index();
  std::string* release_rule_index();
  void set_allocated_rule_index(std::string* rule_index);
  private:
  const std::string& _internal_rule_index() const;
  void _internal_set_rule_index(const std::string& value);
  std::string* _internal_mutable_rule_index();
  public:

  // string version = 3;
  void clear_version();
  const std::string& version() const;
  void set_version(const std::string& value);
  void set_version(std::string&& value);
  void set_version(const char* value);
  void set_version(const char* value, size_t size);
  std::string* mutable_version();
  std::string* release_version();
  void set_allocated_version(std::string* version);
  private:
  const std::string& _internal_version() const;
  void _internal_set_version(const std::string& value);
  std::string* _internal_mutable_version();
  public:

  // @@protoc_insertion_point(class_scope:request_proto.Rule)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr rule_file_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr rule_index_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr version_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Compliance_2eproto;
};
// -------------------------------------------------------------------

class Data PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:request_proto.Data) */ {
 public:
  inline Data() : Data(nullptr) {}
  virtual ~Data();
  explicit constexpr Data(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Data(const Data& from);
  Data(Data&& from) noexcept
    : Data() {
    *this = ::std::move(from);
  }

  inline Data& operator=(const Data& from) {
    CopyFrom(from);
    return *this;
  }
  inline Data& operator=(Data&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Data& default_instance() {
    return *internal_default_instance();
  }
  static inline const Data* internal_default_instance() {
    return reinterpret_cast<const Data*>(
               &_Data_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(Data& a, Data& b) {
    a.Swap(&b);
  }
  inline void Swap(Data* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Data* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Data* New() const final {
    return CreateMaybeMessage<Data>(nullptr);
  }

  Data* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Data>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Data& from);
  void MergeFrom(const Data& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Data* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "request_proto.Data";
  }
  protected:
  explicit Data(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_Compliance_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  typedef Data_SOURCE SOURCE;
  static constexpr SOURCE WS =
    Data_SOURCE_WS;
  static constexpr SOURCE ON =
    Data_SOURCE_ON;
  static constexpr SOURCE OFF =
    Data_SOURCE_OFF;
  static inline bool SOURCE_IsValid(int value) {
    return Data_SOURCE_IsValid(value);
  }
  static constexpr SOURCE SOURCE_MIN =
    Data_SOURCE_SOURCE_MIN;
  static constexpr SOURCE SOURCE_MAX =
    Data_SOURCE_SOURCE_MAX;
  static constexpr int SOURCE_ARRAYSIZE =
    Data_SOURCE_SOURCE_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  SOURCE_descriptor() {
    return Data_SOURCE_descriptor();
  }
  template<typename T>
  static inline const std::string& SOURCE_Name(T enum_t_value) {
    static_assert(::std::is_same<T, SOURCE>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function SOURCE_Name.");
    return Data_SOURCE_Name(enum_t_value);
  }
  static inline bool SOURCE_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      SOURCE* value) {
    return Data_SOURCE_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kEntityNameFieldNumber = 1,
    kEntityValueFieldNumber = 2,
    kSourceFieldNumber = 3,
  };
  // string entity_name = 1;
  void clear_entity_name();
  const std::string& entity_name() const;
  void set_entity_name(const std::string& value);
  void set_entity_name(std::string&& value);
  void set_entity_name(const char* value);
  void set_entity_name(const char* value, size_t size);
  std::string* mutable_entity_name();
  std::string* release_entity_name();
  void set_allocated_entity_name(std::string* entity_name);
  private:
  const std::string& _internal_entity_name() const;
  void _internal_set_entity_name(const std::string& value);
  std::string* _internal_mutable_entity_name();
  public:

  // string entity_value = 2;
  void clear_entity_value();
  const std::string& entity_value() const;
  void set_entity_value(const std::string& value);
  void set_entity_value(std::string&& value);
  void set_entity_value(const char* value);
  void set_entity_value(const char* value, size_t size);
  std::string* mutable_entity_value();
  std::string* release_entity_value();
  void set_allocated_entity_value(std::string* entity_value);
  private:
  const std::string& _internal_entity_value() const;
  void _internal_set_entity_value(const std::string& value);
  std::string* _internal_mutable_entity_value();
  public:

  // .request_proto.Data.SOURCE source = 3;
  void clear_source();
  ::request_proto::Data_SOURCE source() const;
  void set_source(::request_proto::Data_SOURCE value);
  private:
  ::request_proto::Data_SOURCE _internal_source() const;
  void _internal_set_source(::request_proto::Data_SOURCE value);
  public:

  // @@protoc_insertion_point(class_scope:request_proto.Data)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr entity_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr entity_value_;
  int source_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Compliance_2eproto;
};
// -------------------------------------------------------------------

class TransactionInfo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:request_proto.TransactionInfo) */ {
 public:
  inline TransactionInfo() : TransactionInfo(nullptr) {}
  virtual ~TransactionInfo();
  explicit constexpr TransactionInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TransactionInfo(const TransactionInfo& from);
  TransactionInfo(TransactionInfo&& from) noexcept
    : TransactionInfo() {
    *this = ::std::move(from);
  }

  inline TransactionInfo& operator=(const TransactionInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline TransactionInfo& operator=(TransactionInfo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TransactionInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const TransactionInfo* internal_default_instance() {
    return reinterpret_cast<const TransactionInfo*>(
               &_TransactionInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(TransactionInfo& a, TransactionInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(TransactionInfo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TransactionInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TransactionInfo* New() const final {
    return CreateMaybeMessage<TransactionInfo>(nullptr);
  }

  TransactionInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TransactionInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TransactionInfo& from);
  void MergeFrom(const TransactionInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TransactionInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "request_proto.TransactionInfo";
  }
  protected:
  explicit TransactionInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_Compliance_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kArgsFieldNumber = 5,
    kTxIdFieldNumber = 1,
    kChIdFieldNumber = 2,
    kCcIdFieldNumber = 3,
    kFuncNameFieldNumber = 4,
    kTimestampFieldNumber = 8,
    kWsetFieldNumber = 6,
    kVersionFieldNumber = 7,
  };
  // repeated string args = 5;
  int args_size() const;
  private:
  int _internal_args_size() const;
  public:
  void clear_args();
  const std::string& args(int index) const;
  std::string* mutable_args(int index);
  void set_args(int index, const std::string& value);
  void set_args(int index, std::string&& value);
  void set_args(int index, const char* value);
  void set_args(int index, const char* value, size_t size);
  std::string* add_args();
  void add_args(const std::string& value);
  void add_args(std::string&& value);
  void add_args(const char* value);
  void add_args(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& args() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_args();
  private:
  const std::string& _internal_args(int index) const;
  std::string* _internal_add_args();
  public:

  // string tx_id = 1;
  void clear_tx_id();
  const std::string& tx_id() const;
  void set_tx_id(const std::string& value);
  void set_tx_id(std::string&& value);
  void set_tx_id(const char* value);
  void set_tx_id(const char* value, size_t size);
  std::string* mutable_tx_id();
  std::string* release_tx_id();
  void set_allocated_tx_id(std::string* tx_id);
  private:
  const std::string& _internal_tx_id() const;
  void _internal_set_tx_id(const std::string& value);
  std::string* _internal_mutable_tx_id();
  public:

  // string ch_id = 2;
  void clear_ch_id();
  const std::string& ch_id() const;
  void set_ch_id(const std::string& value);
  void set_ch_id(std::string&& value);
  void set_ch_id(const char* value);
  void set_ch_id(const char* value, size_t size);
  std::string* mutable_ch_id();
  std::string* release_ch_id();
  void set_allocated_ch_id(std::string* ch_id);
  private:
  const std::string& _internal_ch_id() const;
  void _internal_set_ch_id(const std::string& value);
  std::string* _internal_mutable_ch_id();
  public:

  // string cc_id = 3;
  void clear_cc_id();
  const std::string& cc_id() const;
  void set_cc_id(const std::string& value);
  void set_cc_id(std::string&& value);
  void set_cc_id(const char* value);
  void set_cc_id(const char* value, size_t size);
  std::string* mutable_cc_id();
  std::string* release_cc_id();
  void set_allocated_cc_id(std::string* cc_id);
  private:
  const std::string& _internal_cc_id() const;
  void _internal_set_cc_id(const std::string& value);
  std::string* _internal_mutable_cc_id();
  public:

  // string func_name = 4;
  void clear_func_name();
  const std::string& func_name() const;
  void set_func_name(const std::string& value);
  void set_func_name(std::string&& value);
  void set_func_name(const char* value);
  void set_func_name(const char* value, size_t size);
  std::string* mutable_func_name();
  std::string* release_func_name();
  void set_allocated_func_name(std::string* func_name);
  private:
  const std::string& _internal_func_name() const;
  void _internal_set_func_name(const std::string& value);
  std::string* _internal_mutable_func_name();
  public:

  // string timestamp = 8;
  void clear_timestamp();
  const std::string& timestamp() const;
  void set_timestamp(const std::string& value);
  void set_timestamp(std::string&& value);
  void set_timestamp(const char* value);
  void set_timestamp(const char* value, size_t size);
  std::string* mutable_timestamp();
  std::string* release_timestamp();
  void set_allocated_timestamp(std::string* timestamp);
  private:
  const std::string& _internal_timestamp() const;
  void _internal_set_timestamp(const std::string& value);
  std::string* _internal_mutable_timestamp();
  public:

  // .request_proto.TxWriteSet wset = 6;
  bool has_wset() const;
  private:
  bool _internal_has_wset() const;
  public:
  void clear_wset();
  const ::request_proto::TxWriteSet& wset() const;
  ::request_proto::TxWriteSet* release_wset();
  ::request_proto::TxWriteSet* mutable_wset();
  void set_allocated_wset(::request_proto::TxWriteSet* wset);
  private:
  const ::request_proto::TxWriteSet& _internal_wset() const;
  ::request_proto::TxWriteSet* _internal_mutable_wset();
  public:
  void unsafe_arena_set_allocated_wset(
      ::request_proto::TxWriteSet* wset);
  ::request_proto::TxWriteSet* unsafe_arena_release_wset();

  // .request_proto.Version version = 7;
  bool has_version() const;
  private:
  bool _internal_has_version() const;
  public:
  void clear_version();
  const ::request_proto::Version& version() const;
  ::request_proto::Version* release_version();
  ::request_proto::Version* mutable_version();
  void set_allocated_version(::request_proto::Version* version);
  private:
  const ::request_proto::Version& _internal_version() const;
  ::request_proto::Version* _internal_mutable_version();
  public:
  void unsafe_arena_set_allocated_version(
      ::request_proto::Version* version);
  ::request_proto::Version* unsafe_arena_release_version();

  // @@protoc_insertion_point(class_scope:request_proto.TransactionInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> args_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr tx_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ch_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr cc_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr func_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr timestamp_;
  ::request_proto::TxWriteSet* wset_;
  ::request_proto::Version* version_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Compliance_2eproto;
};
// -------------------------------------------------------------------

class Version PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:request_proto.Version) */ {
 public:
  inline Version() : Version(nullptr) {}
  virtual ~Version();
  explicit constexpr Version(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Version(const Version& from);
  Version(Version&& from) noexcept
    : Version() {
    *this = ::std::move(from);
  }

  inline Version& operator=(const Version& from) {
    CopyFrom(from);
    return *this;
  }
  inline Version& operator=(Version&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Version& default_instance() {
    return *internal_default_instance();
  }
  static inline const Version* internal_default_instance() {
    return reinterpret_cast<const Version*>(
               &_Version_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(Version& a, Version& b) {
    a.Swap(&b);
  }
  inline void Swap(Version* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Version* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Version* New() const final {
    return CreateMaybeMessage<Version>(nullptr);
  }

  Version* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Version>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Version& from);
  void MergeFrom(const Version& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Version* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "request_proto.Version";
  }
  protected:
  explicit Version(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_Compliance_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBlockNumberFieldNumber = 1,
    kTxIdFieldNumber = 2,
  };
  // string block_number = 1;
  void clear_block_number();
  const std::string& block_number() const;
  void set_block_number(const std::string& value);
  void set_block_number(std::string&& value);
  void set_block_number(const char* value);
  void set_block_number(const char* value, size_t size);
  std::string* mutable_block_number();
  std::string* release_block_number();
  void set_allocated_block_number(std::string* block_number);
  private:
  const std::string& _internal_block_number() const;
  void _internal_set_block_number(const std::string& value);
  std::string* _internal_mutable_block_number();
  public:

  // string tx_id = 2;
  void clear_tx_id();
  const std::string& tx_id() const;
  void set_tx_id(const std::string& value);
  void set_tx_id(std::string&& value);
  void set_tx_id(const char* value);
  void set_tx_id(const char* value, size_t size);
  std::string* mutable_tx_id();
  std::string* release_tx_id();
  void set_allocated_tx_id(std::string* tx_id);
  private:
  const std::string& _internal_tx_id() const;
  void _internal_set_tx_id(const std::string& value);
  std::string* _internal_mutable_tx_id();
  public:

  // @@protoc_insertion_point(class_scope:request_proto.Version)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr block_number_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr tx_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Compliance_2eproto;
};
// -------------------------------------------------------------------

class TxWriteSet PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:request_proto.TxWriteSet) */ {
 public:
  inline TxWriteSet() : TxWriteSet(nullptr) {}
  virtual ~TxWriteSet();
  explicit constexpr TxWriteSet(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TxWriteSet(const TxWriteSet& from);
  TxWriteSet(TxWriteSet&& from) noexcept
    : TxWriteSet() {
    *this = ::std::move(from);
  }

  inline TxWriteSet& operator=(const TxWriteSet& from) {
    CopyFrom(from);
    return *this;
  }
  inline TxWriteSet& operator=(TxWriteSet&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TxWriteSet& default_instance() {
    return *internal_default_instance();
  }
  static inline const TxWriteSet* internal_default_instance() {
    return reinterpret_cast<const TxWriteSet*>(
               &_TxWriteSet_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(TxWriteSet& a, TxWriteSet& b) {
    a.Swap(&b);
  }
  inline void Swap(TxWriteSet* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TxWriteSet* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TxWriteSet* New() const final {
    return CreateMaybeMessage<TxWriteSet>(nullptr);
  }

  TxWriteSet* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TxWriteSet>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TxWriteSet& from);
  void MergeFrom(const TxWriteSet& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TxWriteSet* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "request_proto.TxWriteSet";
  }
  protected:
  explicit TxWriteSet(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_Compliance_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPbWsetFieldNumber = 1,
    kPvWsetFieldNumber = 2,
  };
  // repeated .request_proto.Wset pb_wset = 1;
  int pb_wset_size() const;
  private:
  int _internal_pb_wset_size() const;
  public:
  void clear_pb_wset();
  ::request_proto::Wset* mutable_pb_wset(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::request_proto::Wset >*
      mutable_pb_wset();
  private:
  const ::request_proto::Wset& _internal_pb_wset(int index) const;
  ::request_proto::Wset* _internal_add_pb_wset();
  public:
  const ::request_proto::Wset& pb_wset(int index) const;
  ::request_proto::Wset* add_pb_wset();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::request_proto::Wset >&
      pb_wset() const;

  // repeated .request_proto.Wset pv_wset = 2;
  int pv_wset_size() const;
  private:
  int _internal_pv_wset_size() const;
  public:
  void clear_pv_wset();
  ::request_proto::Wset* mutable_pv_wset(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::request_proto::Wset >*
      mutable_pv_wset();
  private:
  const ::request_proto::Wset& _internal_pv_wset(int index) const;
  ::request_proto::Wset* _internal_add_pv_wset();
  public:
  const ::request_proto::Wset& pv_wset(int index) const;
  ::request_proto::Wset* add_pv_wset();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::request_proto::Wset >&
      pv_wset() const;

  // @@protoc_insertion_point(class_scope:request_proto.TxWriteSet)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::request_proto::Wset > pb_wset_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::request_proto::Wset > pv_wset_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Compliance_2eproto;
};
// -------------------------------------------------------------------

class Wset PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:request_proto.Wset) */ {
 public:
  inline Wset() : Wset(nullptr) {}
  virtual ~Wset();
  explicit constexpr Wset(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Wset(const Wset& from);
  Wset(Wset&& from) noexcept
    : Wset() {
    *this = ::std::move(from);
  }

  inline Wset& operator=(const Wset& from) {
    CopyFrom(from);
    return *this;
  }
  inline Wset& operator=(Wset&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Wset& default_instance() {
    return *internal_default_instance();
  }
  static inline const Wset* internal_default_instance() {
    return reinterpret_cast<const Wset*>(
               &_Wset_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(Wset& a, Wset& b) {
    a.Swap(&b);
  }
  inline void Swap(Wset* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Wset* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Wset* New() const final {
    return CreateMaybeMessage<Wset>(nullptr);
  }

  Wset* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Wset>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Wset& from);
  void MergeFrom(const Wset& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Wset* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "request_proto.Wset";
  }
  protected:
  explicit Wset(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_Compliance_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKeyFieldNumber = 1,
    kValueFieldNumber = 2,
    kNameSpaceFieldNumber = 3,
  };
  // string key = 1;
  void clear_key();
  const std::string& key() const;
  void set_key(const std::string& value);
  void set_key(std::string&& value);
  void set_key(const char* value);
  void set_key(const char* value, size_t size);
  std::string* mutable_key();
  std::string* release_key();
  void set_allocated_key(std::string* key);
  private:
  const std::string& _internal_key() const;
  void _internal_set_key(const std::string& value);
  std::string* _internal_mutable_key();
  public:

  // string value = 2;
  void clear_value();
  const std::string& value() const;
  void set_value(const std::string& value);
  void set_value(std::string&& value);
  void set_value(const char* value);
  void set_value(const char* value, size_t size);
  std::string* mutable_value();
  std::string* release_value();
  void set_allocated_value(std::string* value);
  private:
  const std::string& _internal_value() const;
  void _internal_set_value(const std::string& value);
  std::string* _internal_mutable_value();
  public:

  // string name_space = 3;
  void clear_name_space();
  const std::string& name_space() const;
  void set_name_space(const std::string& value);
  void set_name_space(std::string&& value);
  void set_name_space(const char* value);
  void set_name_space(const char* value, size_t size);
  std::string* mutable_name_space();
  std::string* release_name_space();
  void set_allocated_name_space(std::string* name_space);
  private:
  const std::string& _internal_name_space() const;
  void _internal_set_name_space(const std::string& value);
  std::string* _internal_mutable_name_space();
  public:

  // @@protoc_insertion_point(class_scope:request_proto.Wset)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr key_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_space_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Compliance_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CProof

// string tx_id = 1;
inline void CProof::clear_tx_id() {
  tx_id_.ClearToEmpty();
}
inline const std::string& CProof::tx_id() const {
  // @@protoc_insertion_point(field_get:request_proto.CProof.tx_id)
  return _internal_tx_id();
}
inline void CProof::set_tx_id(const std::string& value) {
  _internal_set_tx_id(value);
  // @@protoc_insertion_point(field_set:request_proto.CProof.tx_id)
}
inline std::string* CProof::mutable_tx_id() {
  // @@protoc_insertion_point(field_mutable:request_proto.CProof.tx_id)
  return _internal_mutable_tx_id();
}
inline const std::string& CProof::_internal_tx_id() const {
  return tx_id_.Get();
}
inline void CProof::_internal_set_tx_id(const std::string& value) {
  
  tx_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CProof::set_tx_id(std::string&& value) {
  
  tx_id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:request_proto.CProof.tx_id)
}
inline void CProof::set_tx_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  tx_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:request_proto.CProof.tx_id)
}
inline void CProof::set_tx_id(const char* value,
    size_t size) {
  
  tx_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:request_proto.CProof.tx_id)
}
inline std::string* CProof::_internal_mutable_tx_id() {
  
  return tx_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CProof::release_tx_id() {
  // @@protoc_insertion_point(field_release:request_proto.CProof.tx_id)
  return tx_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CProof::set_allocated_tx_id(std::string* tx_id) {
  if (tx_id != nullptr) {
    
  } else {
    
  }
  tx_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), tx_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:request_proto.CProof.tx_id)
}

// repeated string inputs = 2;
inline int CProof::_internal_inputs_size() const {
  return inputs_.size();
}
inline int CProof::inputs_size() const {
  return _internal_inputs_size();
}
inline void CProof::clear_inputs() {
  inputs_.Clear();
}
inline std::string* CProof::add_inputs() {
  // @@protoc_insertion_point(field_add_mutable:request_proto.CProof.inputs)
  return _internal_add_inputs();
}
inline const std::string& CProof::_internal_inputs(int index) const {
  return inputs_.Get(index);
}
inline const std::string& CProof::inputs(int index) const {
  // @@protoc_insertion_point(field_get:request_proto.CProof.inputs)
  return _internal_inputs(index);
}
inline std::string* CProof::mutable_inputs(int index) {
  // @@protoc_insertion_point(field_mutable:request_proto.CProof.inputs)
  return inputs_.Mutable(index);
}
inline void CProof::set_inputs(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:request_proto.CProof.inputs)
  inputs_.Mutable(index)->assign(value);
}
inline void CProof::set_inputs(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:request_proto.CProof.inputs)
  inputs_.Mutable(index)->assign(std::move(value));
}
inline void CProof::set_inputs(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  inputs_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:request_proto.CProof.inputs)
}
inline void CProof::set_inputs(int index, const char* value, size_t size) {
  inputs_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:request_proto.CProof.inputs)
}
inline std::string* CProof::_internal_add_inputs() {
  return inputs_.Add();
}
inline void CProof::add_inputs(const std::string& value) {
  inputs_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:request_proto.CProof.inputs)
}
inline void CProof::add_inputs(std::string&& value) {
  inputs_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:request_proto.CProof.inputs)
}
inline void CProof::add_inputs(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  inputs_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:request_proto.CProof.inputs)
}
inline void CProof::add_inputs(const char* value, size_t size) {
  inputs_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:request_proto.CProof.inputs)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
CProof::inputs() const {
  // @@protoc_insertion_point(field_list:request_proto.CProof.inputs)
  return inputs_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
CProof::mutable_inputs() {
  // @@protoc_insertion_point(field_mutable_list:request_proto.CProof.inputs)
  return &inputs_;
}

// repeated .request_proto.CProof.CSTATE status = 3;
inline int CProof::_internal_status_size() const {
  return status_.size();
}
inline int CProof::status_size() const {
  return _internal_status_size();
}
inline void CProof::clear_status() {
  status_.Clear();
}
inline ::request_proto::CProof_CSTATE CProof::_internal_status(int index) const {
  return static_cast< ::request_proto::CProof_CSTATE >(status_.Get(index));
}
inline ::request_proto::CProof_CSTATE CProof::status(int index) const {
  // @@protoc_insertion_point(field_get:request_proto.CProof.status)
  return _internal_status(index);
}
inline void CProof::set_status(int index, ::request_proto::CProof_CSTATE value) {
  status_.Set(index, value);
  // @@protoc_insertion_point(field_set:request_proto.CProof.status)
}
inline void CProof::_internal_add_status(::request_proto::CProof_CSTATE value) {
  status_.Add(value);
}
inline void CProof::add_status(::request_proto::CProof_CSTATE value) {
  // @@protoc_insertion_point(field_add:request_proto.CProof.status)
  _internal_add_status(value);
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>&
CProof::status() const {
  // @@protoc_insertion_point(field_list:request_proto.CProof.status)
  return status_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
CProof::_internal_mutable_status() {
  return &status_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
CProof::mutable_status() {
  // @@protoc_insertion_point(field_mutable_list:request_proto.CProof.status)
  return _internal_mutable_status();
}

// string worldstate_hash = 4;
inline void CProof::clear_worldstate_hash() {
  worldstate_hash_.ClearToEmpty();
}
inline const std::string& CProof::worldstate_hash() const {
  // @@protoc_insertion_point(field_get:request_proto.CProof.worldstate_hash)
  return _internal_worldstate_hash();
}
inline void CProof::set_worldstate_hash(const std::string& value) {
  _internal_set_worldstate_hash(value);
  // @@protoc_insertion_point(field_set:request_proto.CProof.worldstate_hash)
}
inline std::string* CProof::mutable_worldstate_hash() {
  // @@protoc_insertion_point(field_mutable:request_proto.CProof.worldstate_hash)
  return _internal_mutable_worldstate_hash();
}
inline const std::string& CProof::_internal_worldstate_hash() const {
  return worldstate_hash_.Get();
}
inline void CProof::_internal_set_worldstate_hash(const std::string& value) {
  
  worldstate_hash_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CProof::set_worldstate_hash(std::string&& value) {
  
  worldstate_hash_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:request_proto.CProof.worldstate_hash)
}
inline void CProof::set_worldstate_hash(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  worldstate_hash_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:request_proto.CProof.worldstate_hash)
}
inline void CProof::set_worldstate_hash(const char* value,
    size_t size) {
  
  worldstate_hash_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:request_proto.CProof.worldstate_hash)
}
inline std::string* CProof::_internal_mutable_worldstate_hash() {
  
  return worldstate_hash_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CProof::release_worldstate_hash() {
  // @@protoc_insertion_point(field_release:request_proto.CProof.worldstate_hash)
  return worldstate_hash_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CProof::set_allocated_worldstate_hash(std::string* worldstate_hash) {
  if (worldstate_hash != nullptr) {
    
  } else {
    
  }
  worldstate_hash_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), worldstate_hash,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:request_proto.CProof.worldstate_hash)
}

// .request_proto.Binding binding = 5;
inline bool CProof::_internal_has_binding() const {
  return this != internal_default_instance() && binding_ != nullptr;
}
inline bool CProof::has_binding() const {
  return _internal_has_binding();
}
inline void CProof::clear_binding() {
  if (GetArena() == nullptr && binding_ != nullptr) {
    delete binding_;
  }
  binding_ = nullptr;
}
inline const ::request_proto::Binding& CProof::_internal_binding() const {
  const ::request_proto::Binding* p = binding_;
  return p != nullptr ? *p : reinterpret_cast<const ::request_proto::Binding&>(
      ::request_proto::_Binding_default_instance_);
}
inline const ::request_proto::Binding& CProof::binding() const {
  // @@protoc_insertion_point(field_get:request_proto.CProof.binding)
  return _internal_binding();
}
inline void CProof::unsafe_arena_set_allocated_binding(
    ::request_proto::Binding* binding) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(binding_);
  }
  binding_ = binding;
  if (binding) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:request_proto.CProof.binding)
}
inline ::request_proto::Binding* CProof::release_binding() {
  
  ::request_proto::Binding* temp = binding_;
  binding_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::request_proto::Binding* CProof::unsafe_arena_release_binding() {
  // @@protoc_insertion_point(field_release:request_proto.CProof.binding)
  
  ::request_proto::Binding* temp = binding_;
  binding_ = nullptr;
  return temp;
}
inline ::request_proto::Binding* CProof::_internal_mutable_binding() {
  
  if (binding_ == nullptr) {
    auto* p = CreateMaybeMessage<::request_proto::Binding>(GetArena());
    binding_ = p;
  }
  return binding_;
}
inline ::request_proto::Binding* CProof::mutable_binding() {
  // @@protoc_insertion_point(field_mutable:request_proto.CProof.binding)
  return _internal_mutable_binding();
}
inline void CProof::set_allocated_binding(::request_proto::Binding* binding) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete binding_;
  }
  if (binding) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(binding);
    if (message_arena != submessage_arena) {
      binding = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, binding, submessage_arena);
    }
    
  } else {
    
  }
  binding_ = binding;
  // @@protoc_insertion_point(field_set_allocated:request_proto.CProof.binding)
}

// repeated .request_proto.Rule rules = 6;
inline int CProof::_internal_rules_size() const {
  return rules_.size();
}
inline int CProof::rules_size() const {
  return _internal_rules_size();
}
inline void CProof::clear_rules() {
  rules_.Clear();
}
inline ::request_proto::Rule* CProof::mutable_rules(int index) {
  // @@protoc_insertion_point(field_mutable:request_proto.CProof.rules)
  return rules_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::request_proto::Rule >*
CProof::mutable_rules() {
  // @@protoc_insertion_point(field_mutable_list:request_proto.CProof.rules)
  return &rules_;
}
inline const ::request_proto::Rule& CProof::_internal_rules(int index) const {
  return rules_.Get(index);
}
inline const ::request_proto::Rule& CProof::rules(int index) const {
  // @@protoc_insertion_point(field_get:request_proto.CProof.rules)
  return _internal_rules(index);
}
inline ::request_proto::Rule* CProof::_internal_add_rules() {
  return rules_.Add();
}
inline ::request_proto::Rule* CProof::add_rules() {
  // @@protoc_insertion_point(field_add:request_proto.CProof.rules)
  return _internal_add_rules();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::request_proto::Rule >&
CProof::rules() const {
  // @@protoc_insertion_point(field_list:request_proto.CProof.rules)
  return rules_;
}

// repeated .request_proto.Data datas = 7;
inline int CProof::_internal_datas_size() const {
  return datas_.size();
}
inline int CProof::datas_size() const {
  return _internal_datas_size();
}
inline void CProof::clear_datas() {
  datas_.Clear();
}
inline ::request_proto::Data* CProof::mutable_datas(int index) {
  // @@protoc_insertion_point(field_mutable:request_proto.CProof.datas)
  return datas_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::request_proto::Data >*
CProof::mutable_datas() {
  // @@protoc_insertion_point(field_mutable_list:request_proto.CProof.datas)
  return &datas_;
}
inline const ::request_proto::Data& CProof::_internal_datas(int index) const {
  return datas_.Get(index);
}
inline const ::request_proto::Data& CProof::datas(int index) const {
  // @@protoc_insertion_point(field_get:request_proto.CProof.datas)
  return _internal_datas(index);
}
inline ::request_proto::Data* CProof::_internal_add_datas() {
  return datas_.Add();
}
inline ::request_proto::Data* CProof::add_datas() {
  // @@protoc_insertion_point(field_add:request_proto.CProof.datas)
  return _internal_add_datas();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::request_proto::Data >&
CProof::datas() const {
  // @@protoc_insertion_point(field_list:request_proto.CProof.datas)
  return datas_;
}

// string func_name = 8;
inline void CProof::clear_func_name() {
  func_name_.ClearToEmpty();
}
inline const std::string& CProof::func_name() const {
  // @@protoc_insertion_point(field_get:request_proto.CProof.func_name)
  return _internal_func_name();
}
inline void CProof::set_func_name(const std::string& value) {
  _internal_set_func_name(value);
  // @@protoc_insertion_point(field_set:request_proto.CProof.func_name)
}
inline std::string* CProof::mutable_func_name() {
  // @@protoc_insertion_point(field_mutable:request_proto.CProof.func_name)
  return _internal_mutable_func_name();
}
inline const std::string& CProof::_internal_func_name() const {
  return func_name_.Get();
}
inline void CProof::_internal_set_func_name(const std::string& value) {
  
  func_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CProof::set_func_name(std::string&& value) {
  
  func_name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:request_proto.CProof.func_name)
}
inline void CProof::set_func_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  func_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:request_proto.CProof.func_name)
}
inline void CProof::set_func_name(const char* value,
    size_t size) {
  
  func_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:request_proto.CProof.func_name)
}
inline std::string* CProof::_internal_mutable_func_name() {
  
  return func_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CProof::release_func_name() {
  // @@protoc_insertion_point(field_release:request_proto.CProof.func_name)
  return func_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CProof::set_allocated_func_name(std::string* func_name) {
  if (func_name != nullptr) {
    
  } else {
    
  }
  func_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), func_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:request_proto.CProof.func_name)
}

// string peer_signature = 9;
inline void CProof::clear_peer_signature() {
  peer_signature_.ClearToEmpty();
}
inline const std::string& CProof::peer_signature() const {
  // @@protoc_insertion_point(field_get:request_proto.CProof.peer_signature)
  return _internal_peer_signature();
}
inline void CProof::set_peer_signature(const std::string& value) {
  _internal_set_peer_signature(value);
  // @@protoc_insertion_point(field_set:request_proto.CProof.peer_signature)
}
inline std::string* CProof::mutable_peer_signature() {
  // @@protoc_insertion_point(field_mutable:request_proto.CProof.peer_signature)
  return _internal_mutable_peer_signature();
}
inline const std::string& CProof::_internal_peer_signature() const {
  return peer_signature_.Get();
}
inline void CProof::_internal_set_peer_signature(const std::string& value) {
  
  peer_signature_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CProof::set_peer_signature(std::string&& value) {
  
  peer_signature_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:request_proto.CProof.peer_signature)
}
inline void CProof::set_peer_signature(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  peer_signature_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:request_proto.CProof.peer_signature)
}
inline void CProof::set_peer_signature(const char* value,
    size_t size) {
  
  peer_signature_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:request_proto.CProof.peer_signature)
}
inline std::string* CProof::_internal_mutable_peer_signature() {
  
  return peer_signature_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CProof::release_peer_signature() {
  // @@protoc_insertion_point(field_release:request_proto.CProof.peer_signature)
  return peer_signature_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CProof::set_allocated_peer_signature(std::string* peer_signature) {
  if (peer_signature != nullptr) {
    
  } else {
    
  }
  peer_signature_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), peer_signature,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:request_proto.CProof.peer_signature)
}

// string peer_cert = 12;
inline void CProof::clear_peer_cert() {
  peer_cert_.ClearToEmpty();
}
inline const std::string& CProof::peer_cert() const {
  // @@protoc_insertion_point(field_get:request_proto.CProof.peer_cert)
  return _internal_peer_cert();
}
inline void CProof::set_peer_cert(const std::string& value) {
  _internal_set_peer_cert(value);
  // @@protoc_insertion_point(field_set:request_proto.CProof.peer_cert)
}
inline std::string* CProof::mutable_peer_cert() {
  // @@protoc_insertion_point(field_mutable:request_proto.CProof.peer_cert)
  return _internal_mutable_peer_cert();
}
inline const std::string& CProof::_internal_peer_cert() const {
  return peer_cert_.Get();
}
inline void CProof::_internal_set_peer_cert(const std::string& value) {
  
  peer_cert_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CProof::set_peer_cert(std::string&& value) {
  
  peer_cert_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:request_proto.CProof.peer_cert)
}
inline void CProof::set_peer_cert(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  peer_cert_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:request_proto.CProof.peer_cert)
}
inline void CProof::set_peer_cert(const char* value,
    size_t size) {
  
  peer_cert_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:request_proto.CProof.peer_cert)
}
inline std::string* CProof::_internal_mutable_peer_cert() {
  
  return peer_cert_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CProof::release_peer_cert() {
  // @@protoc_insertion_point(field_release:request_proto.CProof.peer_cert)
  return peer_cert_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CProof::set_allocated_peer_cert(std::string* peer_cert) {
  if (peer_cert != nullptr) {
    
  } else {
    
  }
  peer_cert_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), peer_cert,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:request_proto.CProof.peer_cert)
}

// string tee_pk = 10;
inline void CProof::clear_tee_pk() {
  tee_pk_.ClearToEmpty();
}
inline const std::string& CProof::tee_pk() const {
  // @@protoc_insertion_point(field_get:request_proto.CProof.tee_pk)
  return _internal_tee_pk();
}
inline void CProof::set_tee_pk(const std::string& value) {
  _internal_set_tee_pk(value);
  // @@protoc_insertion_point(field_set:request_proto.CProof.tee_pk)
}
inline std::string* CProof::mutable_tee_pk() {
  // @@protoc_insertion_point(field_mutable:request_proto.CProof.tee_pk)
  return _internal_mutable_tee_pk();
}
inline const std::string& CProof::_internal_tee_pk() const {
  return tee_pk_.Get();
}
inline void CProof::_internal_set_tee_pk(const std::string& value) {
  
  tee_pk_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CProof::set_tee_pk(std::string&& value) {
  
  tee_pk_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:request_proto.CProof.tee_pk)
}
inline void CProof::set_tee_pk(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  tee_pk_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:request_proto.CProof.tee_pk)
}
inline void CProof::set_tee_pk(const char* value,
    size_t size) {
  
  tee_pk_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:request_proto.CProof.tee_pk)
}
inline std::string* CProof::_internal_mutable_tee_pk() {
  
  return tee_pk_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CProof::release_tee_pk() {
  // @@protoc_insertion_point(field_release:request_proto.CProof.tee_pk)
  return tee_pk_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CProof::set_allocated_tee_pk(std::string* tee_pk) {
  if (tee_pk != nullptr) {
    
  } else {
    
  }
  tee_pk_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), tee_pk,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:request_proto.CProof.tee_pk)
}

// string tee_signature = 11;
inline void CProof::clear_tee_signature() {
  tee_signature_.ClearToEmpty();
}
inline const std::string& CProof::tee_signature() const {
  // @@protoc_insertion_point(field_get:request_proto.CProof.tee_signature)
  return _internal_tee_signature();
}
inline void CProof::set_tee_signature(const std::string& value) {
  _internal_set_tee_signature(value);
  // @@protoc_insertion_point(field_set:request_proto.CProof.tee_signature)
}
inline std::string* CProof::mutable_tee_signature() {
  // @@protoc_insertion_point(field_mutable:request_proto.CProof.tee_signature)
  return _internal_mutable_tee_signature();
}
inline const std::string& CProof::_internal_tee_signature() const {
  return tee_signature_.Get();
}
inline void CProof::_internal_set_tee_signature(const std::string& value) {
  
  tee_signature_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CProof::set_tee_signature(std::string&& value) {
  
  tee_signature_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:request_proto.CProof.tee_signature)
}
inline void CProof::set_tee_signature(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  tee_signature_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:request_proto.CProof.tee_signature)
}
inline void CProof::set_tee_signature(const char* value,
    size_t size) {
  
  tee_signature_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:request_proto.CProof.tee_signature)
}
inline std::string* CProof::_internal_mutable_tee_signature() {
  
  return tee_signature_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CProof::release_tee_signature() {
  // @@protoc_insertion_point(field_release:request_proto.CProof.tee_signature)
  return tee_signature_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CProof::set_allocated_tee_signature(std::string* tee_signature) {
  if (tee_signature != nullptr) {
    
  } else {
    
  }
  tee_signature_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), tee_signature,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:request_proto.CProof.tee_signature)
}

// repeated string query = 13;
inline int CProof::_internal_query_size() const {
  return query_.size();
}
inline int CProof::query_size() const {
  return _internal_query_size();
}
inline void CProof::clear_query() {
  query_.Clear();
}
inline std::string* CProof::add_query() {
  // @@protoc_insertion_point(field_add_mutable:request_proto.CProof.query)
  return _internal_add_query();
}
inline const std::string& CProof::_internal_query(int index) const {
  return query_.Get(index);
}
inline const std::string& CProof::query(int index) const {
  // @@protoc_insertion_point(field_get:request_proto.CProof.query)
  return _internal_query(index);
}
inline std::string* CProof::mutable_query(int index) {
  // @@protoc_insertion_point(field_mutable:request_proto.CProof.query)
  return query_.Mutable(index);
}
inline void CProof::set_query(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:request_proto.CProof.query)
  query_.Mutable(index)->assign(value);
}
inline void CProof::set_query(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:request_proto.CProof.query)
  query_.Mutable(index)->assign(std::move(value));
}
inline void CProof::set_query(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  query_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:request_proto.CProof.query)
}
inline void CProof::set_query(int index, const char* value, size_t size) {
  query_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:request_proto.CProof.query)
}
inline std::string* CProof::_internal_add_query() {
  return query_.Add();
}
inline void CProof::add_query(const std::string& value) {
  query_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:request_proto.CProof.query)
}
inline void CProof::add_query(std::string&& value) {
  query_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:request_proto.CProof.query)
}
inline void CProof::add_query(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  query_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:request_proto.CProof.query)
}
inline void CProof::add_query(const char* value, size_t size) {
  query_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:request_proto.CProof.query)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
CProof::query() const {
  // @@protoc_insertion_point(field_list:request_proto.CProof.query)
  return query_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
CProof::mutable_query() {
  // @@protoc_insertion_point(field_mutable_list:request_proto.CProof.query)
  return &query_;
}

// -------------------------------------------------------------------

// Binding

// string id = 1;
inline void Binding::clear_id() {
  id_.ClearToEmpty();
}
inline const std::string& Binding::id() const {
  // @@protoc_insertion_point(field_get:request_proto.Binding.id)
  return _internal_id();
}
inline void Binding::set_id(const std::string& value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:request_proto.Binding.id)
}
inline std::string* Binding::mutable_id() {
  // @@protoc_insertion_point(field_mutable:request_proto.Binding.id)
  return _internal_mutable_id();
}
inline const std::string& Binding::_internal_id() const {
  return id_.Get();
}
inline void Binding::_internal_set_id(const std::string& value) {
  
  id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Binding::set_id(std::string&& value) {
  
  id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:request_proto.Binding.id)
}
inline void Binding::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:request_proto.Binding.id)
}
inline void Binding::set_id(const char* value,
    size_t size) {
  
  id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:request_proto.Binding.id)
}
inline std::string* Binding::_internal_mutable_id() {
  
  return id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Binding::release_id() {
  // @@protoc_insertion_point(field_release:request_proto.Binding.id)
  return id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Binding::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:request_proto.Binding.id)
}

// string version = 3;
inline void Binding::clear_version() {
  version_.ClearToEmpty();
}
inline const std::string& Binding::version() const {
  // @@protoc_insertion_point(field_get:request_proto.Binding.version)
  return _internal_version();
}
inline void Binding::set_version(const std::string& value) {
  _internal_set_version(value);
  // @@protoc_insertion_point(field_set:request_proto.Binding.version)
}
inline std::string* Binding::mutable_version() {
  // @@protoc_insertion_point(field_mutable:request_proto.Binding.version)
  return _internal_mutable_version();
}
inline const std::string& Binding::_internal_version() const {
  return version_.Get();
}
inline void Binding::_internal_set_version(const std::string& value) {
  
  version_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Binding::set_version(std::string&& value) {
  
  version_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:request_proto.Binding.version)
}
inline void Binding::set_version(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  version_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:request_proto.Binding.version)
}
inline void Binding::set_version(const char* value,
    size_t size) {
  
  version_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:request_proto.Binding.version)
}
inline std::string* Binding::_internal_mutable_version() {
  
  return version_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Binding::release_version() {
  // @@protoc_insertion_point(field_release:request_proto.Binding.version)
  return version_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Binding::set_allocated_version(std::string* version) {
  if (version != nullptr) {
    
  } else {
    
  }
  version_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), version,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:request_proto.Binding.version)
}

// -------------------------------------------------------------------

// Rule

// string rule_file = 1;
inline void Rule::clear_rule_file() {
  rule_file_.ClearToEmpty();
}
inline const std::string& Rule::rule_file() const {
  // @@protoc_insertion_point(field_get:request_proto.Rule.rule_file)
  return _internal_rule_file();
}
inline void Rule::set_rule_file(const std::string& value) {
  _internal_set_rule_file(value);
  // @@protoc_insertion_point(field_set:request_proto.Rule.rule_file)
}
inline std::string* Rule::mutable_rule_file() {
  // @@protoc_insertion_point(field_mutable:request_proto.Rule.rule_file)
  return _internal_mutable_rule_file();
}
inline const std::string& Rule::_internal_rule_file() const {
  return rule_file_.Get();
}
inline void Rule::_internal_set_rule_file(const std::string& value) {
  
  rule_file_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Rule::set_rule_file(std::string&& value) {
  
  rule_file_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:request_proto.Rule.rule_file)
}
inline void Rule::set_rule_file(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  rule_file_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:request_proto.Rule.rule_file)
}
inline void Rule::set_rule_file(const char* value,
    size_t size) {
  
  rule_file_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:request_proto.Rule.rule_file)
}
inline std::string* Rule::_internal_mutable_rule_file() {
  
  return rule_file_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Rule::release_rule_file() {
  // @@protoc_insertion_point(field_release:request_proto.Rule.rule_file)
  return rule_file_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Rule::set_allocated_rule_file(std::string* rule_file) {
  if (rule_file != nullptr) {
    
  } else {
    
  }
  rule_file_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), rule_file,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:request_proto.Rule.rule_file)
}

// string rule_index = 2;
inline void Rule::clear_rule_index() {
  rule_index_.ClearToEmpty();
}
inline const std::string& Rule::rule_index() const {
  // @@protoc_insertion_point(field_get:request_proto.Rule.rule_index)
  return _internal_rule_index();
}
inline void Rule::set_rule_index(const std::string& value) {
  _internal_set_rule_index(value);
  // @@protoc_insertion_point(field_set:request_proto.Rule.rule_index)
}
inline std::string* Rule::mutable_rule_index() {
  // @@protoc_insertion_point(field_mutable:request_proto.Rule.rule_index)
  return _internal_mutable_rule_index();
}
inline const std::string& Rule::_internal_rule_index() const {
  return rule_index_.Get();
}
inline void Rule::_internal_set_rule_index(const std::string& value) {
  
  rule_index_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Rule::set_rule_index(std::string&& value) {
  
  rule_index_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:request_proto.Rule.rule_index)
}
inline void Rule::set_rule_index(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  rule_index_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:request_proto.Rule.rule_index)
}
inline void Rule::set_rule_index(const char* value,
    size_t size) {
  
  rule_index_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:request_proto.Rule.rule_index)
}
inline std::string* Rule::_internal_mutable_rule_index() {
  
  return rule_index_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Rule::release_rule_index() {
  // @@protoc_insertion_point(field_release:request_proto.Rule.rule_index)
  return rule_index_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Rule::set_allocated_rule_index(std::string* rule_index) {
  if (rule_index != nullptr) {
    
  } else {
    
  }
  rule_index_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), rule_index,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:request_proto.Rule.rule_index)
}

// string version = 3;
inline void Rule::clear_version() {
  version_.ClearToEmpty();
}
inline const std::string& Rule::version() const {
  // @@protoc_insertion_point(field_get:request_proto.Rule.version)
  return _internal_version();
}
inline void Rule::set_version(const std::string& value) {
  _internal_set_version(value);
  // @@protoc_insertion_point(field_set:request_proto.Rule.version)
}
inline std::string* Rule::mutable_version() {
  // @@protoc_insertion_point(field_mutable:request_proto.Rule.version)
  return _internal_mutable_version();
}
inline const std::string& Rule::_internal_version() const {
  return version_.Get();
}
inline void Rule::_internal_set_version(const std::string& value) {
  
  version_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Rule::set_version(std::string&& value) {
  
  version_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:request_proto.Rule.version)
}
inline void Rule::set_version(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  version_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:request_proto.Rule.version)
}
inline void Rule::set_version(const char* value,
    size_t size) {
  
  version_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:request_proto.Rule.version)
}
inline std::string* Rule::_internal_mutable_version() {
  
  return version_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Rule::release_version() {
  // @@protoc_insertion_point(field_release:request_proto.Rule.version)
  return version_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Rule::set_allocated_version(std::string* version) {
  if (version != nullptr) {
    
  } else {
    
  }
  version_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), version,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:request_proto.Rule.version)
}

// -------------------------------------------------------------------

// Data

// string entity_name = 1;
inline void Data::clear_entity_name() {
  entity_name_.ClearToEmpty();
}
inline const std::string& Data::entity_name() const {
  // @@protoc_insertion_point(field_get:request_proto.Data.entity_name)
  return _internal_entity_name();
}
inline void Data::set_entity_name(const std::string& value) {
  _internal_set_entity_name(value);
  // @@protoc_insertion_point(field_set:request_proto.Data.entity_name)
}
inline std::string* Data::mutable_entity_name() {
  // @@protoc_insertion_point(field_mutable:request_proto.Data.entity_name)
  return _internal_mutable_entity_name();
}
inline const std::string& Data::_internal_entity_name() const {
  return entity_name_.Get();
}
inline void Data::_internal_set_entity_name(const std::string& value) {
  
  entity_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Data::set_entity_name(std::string&& value) {
  
  entity_name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:request_proto.Data.entity_name)
}
inline void Data::set_entity_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  entity_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:request_proto.Data.entity_name)
}
inline void Data::set_entity_name(const char* value,
    size_t size) {
  
  entity_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:request_proto.Data.entity_name)
}
inline std::string* Data::_internal_mutable_entity_name() {
  
  return entity_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Data::release_entity_name() {
  // @@protoc_insertion_point(field_release:request_proto.Data.entity_name)
  return entity_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Data::set_allocated_entity_name(std::string* entity_name) {
  if (entity_name != nullptr) {
    
  } else {
    
  }
  entity_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), entity_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:request_proto.Data.entity_name)
}

// string entity_value = 2;
inline void Data::clear_entity_value() {
  entity_value_.ClearToEmpty();
}
inline const std::string& Data::entity_value() const {
  // @@protoc_insertion_point(field_get:request_proto.Data.entity_value)
  return _internal_entity_value();
}
inline void Data::set_entity_value(const std::string& value) {
  _internal_set_entity_value(value);
  // @@protoc_insertion_point(field_set:request_proto.Data.entity_value)
}
inline std::string* Data::mutable_entity_value() {
  // @@protoc_insertion_point(field_mutable:request_proto.Data.entity_value)
  return _internal_mutable_entity_value();
}
inline const std::string& Data::_internal_entity_value() const {
  return entity_value_.Get();
}
inline void Data::_internal_set_entity_value(const std::string& value) {
  
  entity_value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Data::set_entity_value(std::string&& value) {
  
  entity_value_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:request_proto.Data.entity_value)
}
inline void Data::set_entity_value(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  entity_value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:request_proto.Data.entity_value)
}
inline void Data::set_entity_value(const char* value,
    size_t size) {
  
  entity_value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:request_proto.Data.entity_value)
}
inline std::string* Data::_internal_mutable_entity_value() {
  
  return entity_value_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Data::release_entity_value() {
  // @@protoc_insertion_point(field_release:request_proto.Data.entity_value)
  return entity_value_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Data::set_allocated_entity_value(std::string* entity_value) {
  if (entity_value != nullptr) {
    
  } else {
    
  }
  entity_value_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), entity_value,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:request_proto.Data.entity_value)
}

// .request_proto.Data.SOURCE source = 3;
inline void Data::clear_source() {
  source_ = 0;
}
inline ::request_proto::Data_SOURCE Data::_internal_source() const {
  return static_cast< ::request_proto::Data_SOURCE >(source_);
}
inline ::request_proto::Data_SOURCE Data::source() const {
  // @@protoc_insertion_point(field_get:request_proto.Data.source)
  return _internal_source();
}
inline void Data::_internal_set_source(::request_proto::Data_SOURCE value) {
  
  source_ = value;
}
inline void Data::set_source(::request_proto::Data_SOURCE value) {
  _internal_set_source(value);
  // @@protoc_insertion_point(field_set:request_proto.Data.source)
}

// -------------------------------------------------------------------

// TransactionInfo

// string tx_id = 1;
inline void TransactionInfo::clear_tx_id() {
  tx_id_.ClearToEmpty();
}
inline const std::string& TransactionInfo::tx_id() const {
  // @@protoc_insertion_point(field_get:request_proto.TransactionInfo.tx_id)
  return _internal_tx_id();
}
inline void TransactionInfo::set_tx_id(const std::string& value) {
  _internal_set_tx_id(value);
  // @@protoc_insertion_point(field_set:request_proto.TransactionInfo.tx_id)
}
inline std::string* TransactionInfo::mutable_tx_id() {
  // @@protoc_insertion_point(field_mutable:request_proto.TransactionInfo.tx_id)
  return _internal_mutable_tx_id();
}
inline const std::string& TransactionInfo::_internal_tx_id() const {
  return tx_id_.Get();
}
inline void TransactionInfo::_internal_set_tx_id(const std::string& value) {
  
  tx_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void TransactionInfo::set_tx_id(std::string&& value) {
  
  tx_id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:request_proto.TransactionInfo.tx_id)
}
inline void TransactionInfo::set_tx_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  tx_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:request_proto.TransactionInfo.tx_id)
}
inline void TransactionInfo::set_tx_id(const char* value,
    size_t size) {
  
  tx_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:request_proto.TransactionInfo.tx_id)
}
inline std::string* TransactionInfo::_internal_mutable_tx_id() {
  
  return tx_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* TransactionInfo::release_tx_id() {
  // @@protoc_insertion_point(field_release:request_proto.TransactionInfo.tx_id)
  return tx_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void TransactionInfo::set_allocated_tx_id(std::string* tx_id) {
  if (tx_id != nullptr) {
    
  } else {
    
  }
  tx_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), tx_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:request_proto.TransactionInfo.tx_id)
}

// string ch_id = 2;
inline void TransactionInfo::clear_ch_id() {
  ch_id_.ClearToEmpty();
}
inline const std::string& TransactionInfo::ch_id() const {
  // @@protoc_insertion_point(field_get:request_proto.TransactionInfo.ch_id)
  return _internal_ch_id();
}
inline void TransactionInfo::set_ch_id(const std::string& value) {
  _internal_set_ch_id(value);
  // @@protoc_insertion_point(field_set:request_proto.TransactionInfo.ch_id)
}
inline std::string* TransactionInfo::mutable_ch_id() {
  // @@protoc_insertion_point(field_mutable:request_proto.TransactionInfo.ch_id)
  return _internal_mutable_ch_id();
}
inline const std::string& TransactionInfo::_internal_ch_id() const {
  return ch_id_.Get();
}
inline void TransactionInfo::_internal_set_ch_id(const std::string& value) {
  
  ch_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void TransactionInfo::set_ch_id(std::string&& value) {
  
  ch_id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:request_proto.TransactionInfo.ch_id)
}
inline void TransactionInfo::set_ch_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  ch_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:request_proto.TransactionInfo.ch_id)
}
inline void TransactionInfo::set_ch_id(const char* value,
    size_t size) {
  
  ch_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:request_proto.TransactionInfo.ch_id)
}
inline std::string* TransactionInfo::_internal_mutable_ch_id() {
  
  return ch_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* TransactionInfo::release_ch_id() {
  // @@protoc_insertion_point(field_release:request_proto.TransactionInfo.ch_id)
  return ch_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void TransactionInfo::set_allocated_ch_id(std::string* ch_id) {
  if (ch_id != nullptr) {
    
  } else {
    
  }
  ch_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ch_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:request_proto.TransactionInfo.ch_id)
}

// string cc_id = 3;
inline void TransactionInfo::clear_cc_id() {
  cc_id_.ClearToEmpty();
}
inline const std::string& TransactionInfo::cc_id() const {
  // @@protoc_insertion_point(field_get:request_proto.TransactionInfo.cc_id)
  return _internal_cc_id();
}
inline void TransactionInfo::set_cc_id(const std::string& value) {
  _internal_set_cc_id(value);
  // @@protoc_insertion_point(field_set:request_proto.TransactionInfo.cc_id)
}
inline std::string* TransactionInfo::mutable_cc_id() {
  // @@protoc_insertion_point(field_mutable:request_proto.TransactionInfo.cc_id)
  return _internal_mutable_cc_id();
}
inline const std::string& TransactionInfo::_internal_cc_id() const {
  return cc_id_.Get();
}
inline void TransactionInfo::_internal_set_cc_id(const std::string& value) {
  
  cc_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void TransactionInfo::set_cc_id(std::string&& value) {
  
  cc_id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:request_proto.TransactionInfo.cc_id)
}
inline void TransactionInfo::set_cc_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  cc_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:request_proto.TransactionInfo.cc_id)
}
inline void TransactionInfo::set_cc_id(const char* value,
    size_t size) {
  
  cc_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:request_proto.TransactionInfo.cc_id)
}
inline std::string* TransactionInfo::_internal_mutable_cc_id() {
  
  return cc_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* TransactionInfo::release_cc_id() {
  // @@protoc_insertion_point(field_release:request_proto.TransactionInfo.cc_id)
  return cc_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void TransactionInfo::set_allocated_cc_id(std::string* cc_id) {
  if (cc_id != nullptr) {
    
  } else {
    
  }
  cc_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), cc_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:request_proto.TransactionInfo.cc_id)
}

// string func_name = 4;
inline void TransactionInfo::clear_func_name() {
  func_name_.ClearToEmpty();
}
inline const std::string& TransactionInfo::func_name() const {
  // @@protoc_insertion_point(field_get:request_proto.TransactionInfo.func_name)
  return _internal_func_name();
}
inline void TransactionInfo::set_func_name(const std::string& value) {
  _internal_set_func_name(value);
  // @@protoc_insertion_point(field_set:request_proto.TransactionInfo.func_name)
}
inline std::string* TransactionInfo::mutable_func_name() {
  // @@protoc_insertion_point(field_mutable:request_proto.TransactionInfo.func_name)
  return _internal_mutable_func_name();
}
inline const std::string& TransactionInfo::_internal_func_name() const {
  return func_name_.Get();
}
inline void TransactionInfo::_internal_set_func_name(const std::string& value) {
  
  func_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void TransactionInfo::set_func_name(std::string&& value) {
  
  func_name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:request_proto.TransactionInfo.func_name)
}
inline void TransactionInfo::set_func_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  func_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:request_proto.TransactionInfo.func_name)
}
inline void TransactionInfo::set_func_name(const char* value,
    size_t size) {
  
  func_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:request_proto.TransactionInfo.func_name)
}
inline std::string* TransactionInfo::_internal_mutable_func_name() {
  
  return func_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* TransactionInfo::release_func_name() {
  // @@protoc_insertion_point(field_release:request_proto.TransactionInfo.func_name)
  return func_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void TransactionInfo::set_allocated_func_name(std::string* func_name) {
  if (func_name != nullptr) {
    
  } else {
    
  }
  func_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), func_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:request_proto.TransactionInfo.func_name)
}

// repeated string args = 5;
inline int TransactionInfo::_internal_args_size() const {
  return args_.size();
}
inline int TransactionInfo::args_size() const {
  return _internal_args_size();
}
inline void TransactionInfo::clear_args() {
  args_.Clear();
}
inline std::string* TransactionInfo::add_args() {
  // @@protoc_insertion_point(field_add_mutable:request_proto.TransactionInfo.args)
  return _internal_add_args();
}
inline const std::string& TransactionInfo::_internal_args(int index) const {
  return args_.Get(index);
}
inline const std::string& TransactionInfo::args(int index) const {
  // @@protoc_insertion_point(field_get:request_proto.TransactionInfo.args)
  return _internal_args(index);
}
inline std::string* TransactionInfo::mutable_args(int index) {
  // @@protoc_insertion_point(field_mutable:request_proto.TransactionInfo.args)
  return args_.Mutable(index);
}
inline void TransactionInfo::set_args(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:request_proto.TransactionInfo.args)
  args_.Mutable(index)->assign(value);
}
inline void TransactionInfo::set_args(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:request_proto.TransactionInfo.args)
  args_.Mutable(index)->assign(std::move(value));
}
inline void TransactionInfo::set_args(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  args_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:request_proto.TransactionInfo.args)
}
inline void TransactionInfo::set_args(int index, const char* value, size_t size) {
  args_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:request_proto.TransactionInfo.args)
}
inline std::string* TransactionInfo::_internal_add_args() {
  return args_.Add();
}
inline void TransactionInfo::add_args(const std::string& value) {
  args_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:request_proto.TransactionInfo.args)
}
inline void TransactionInfo::add_args(std::string&& value) {
  args_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:request_proto.TransactionInfo.args)
}
inline void TransactionInfo::add_args(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  args_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:request_proto.TransactionInfo.args)
}
inline void TransactionInfo::add_args(const char* value, size_t size) {
  args_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:request_proto.TransactionInfo.args)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
TransactionInfo::args() const {
  // @@protoc_insertion_point(field_list:request_proto.TransactionInfo.args)
  return args_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
TransactionInfo::mutable_args() {
  // @@protoc_insertion_point(field_mutable_list:request_proto.TransactionInfo.args)
  return &args_;
}

// .request_proto.TxWriteSet wset = 6;
inline bool TransactionInfo::_internal_has_wset() const {
  return this != internal_default_instance() && wset_ != nullptr;
}
inline bool TransactionInfo::has_wset() const {
  return _internal_has_wset();
}
inline void TransactionInfo::clear_wset() {
  if (GetArena() == nullptr && wset_ != nullptr) {
    delete wset_;
  }
  wset_ = nullptr;
}
inline const ::request_proto::TxWriteSet& TransactionInfo::_internal_wset() const {
  const ::request_proto::TxWriteSet* p = wset_;
  return p != nullptr ? *p : reinterpret_cast<const ::request_proto::TxWriteSet&>(
      ::request_proto::_TxWriteSet_default_instance_);
}
inline const ::request_proto::TxWriteSet& TransactionInfo::wset() const {
  // @@protoc_insertion_point(field_get:request_proto.TransactionInfo.wset)
  return _internal_wset();
}
inline void TransactionInfo::unsafe_arena_set_allocated_wset(
    ::request_proto::TxWriteSet* wset) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(wset_);
  }
  wset_ = wset;
  if (wset) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:request_proto.TransactionInfo.wset)
}
inline ::request_proto::TxWriteSet* TransactionInfo::release_wset() {
  
  ::request_proto::TxWriteSet* temp = wset_;
  wset_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::request_proto::TxWriteSet* TransactionInfo::unsafe_arena_release_wset() {
  // @@protoc_insertion_point(field_release:request_proto.TransactionInfo.wset)
  
  ::request_proto::TxWriteSet* temp = wset_;
  wset_ = nullptr;
  return temp;
}
inline ::request_proto::TxWriteSet* TransactionInfo::_internal_mutable_wset() {
  
  if (wset_ == nullptr) {
    auto* p = CreateMaybeMessage<::request_proto::TxWriteSet>(GetArena());
    wset_ = p;
  }
  return wset_;
}
inline ::request_proto::TxWriteSet* TransactionInfo::mutable_wset() {
  // @@protoc_insertion_point(field_mutable:request_proto.TransactionInfo.wset)
  return _internal_mutable_wset();
}
inline void TransactionInfo::set_allocated_wset(::request_proto::TxWriteSet* wset) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete wset_;
  }
  if (wset) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(wset);
    if (message_arena != submessage_arena) {
      wset = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, wset, submessage_arena);
    }
    
  } else {
    
  }
  wset_ = wset;
  // @@protoc_insertion_point(field_set_allocated:request_proto.TransactionInfo.wset)
}

// .request_proto.Version version = 7;
inline bool TransactionInfo::_internal_has_version() const {
  return this != internal_default_instance() && version_ != nullptr;
}
inline bool TransactionInfo::has_version() const {
  return _internal_has_version();
}
inline void TransactionInfo::clear_version() {
  if (GetArena() == nullptr && version_ != nullptr) {
    delete version_;
  }
  version_ = nullptr;
}
inline const ::request_proto::Version& TransactionInfo::_internal_version() const {
  const ::request_proto::Version* p = version_;
  return p != nullptr ? *p : reinterpret_cast<const ::request_proto::Version&>(
      ::request_proto::_Version_default_instance_);
}
inline const ::request_proto::Version& TransactionInfo::version() const {
  // @@protoc_insertion_point(field_get:request_proto.TransactionInfo.version)
  return _internal_version();
}
inline void TransactionInfo::unsafe_arena_set_allocated_version(
    ::request_proto::Version* version) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(version_);
  }
  version_ = version;
  if (version) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:request_proto.TransactionInfo.version)
}
inline ::request_proto::Version* TransactionInfo::release_version() {
  
  ::request_proto::Version* temp = version_;
  version_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::request_proto::Version* TransactionInfo::unsafe_arena_release_version() {
  // @@protoc_insertion_point(field_release:request_proto.TransactionInfo.version)
  
  ::request_proto::Version* temp = version_;
  version_ = nullptr;
  return temp;
}
inline ::request_proto::Version* TransactionInfo::_internal_mutable_version() {
  
  if (version_ == nullptr) {
    auto* p = CreateMaybeMessage<::request_proto::Version>(GetArena());
    version_ = p;
  }
  return version_;
}
inline ::request_proto::Version* TransactionInfo::mutable_version() {
  // @@protoc_insertion_point(field_mutable:request_proto.TransactionInfo.version)
  return _internal_mutable_version();
}
inline void TransactionInfo::set_allocated_version(::request_proto::Version* version) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete version_;
  }
  if (version) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(version);
    if (message_arena != submessage_arena) {
      version = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, version, submessage_arena);
    }
    
  } else {
    
  }
  version_ = version;
  // @@protoc_insertion_point(field_set_allocated:request_proto.TransactionInfo.version)
}

// string timestamp = 8;
inline void TransactionInfo::clear_timestamp() {
  timestamp_.ClearToEmpty();
}
inline const std::string& TransactionInfo::timestamp() const {
  // @@protoc_insertion_point(field_get:request_proto.TransactionInfo.timestamp)
  return _internal_timestamp();
}
inline void TransactionInfo::set_timestamp(const std::string& value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:request_proto.TransactionInfo.timestamp)
}
inline std::string* TransactionInfo::mutable_timestamp() {
  // @@protoc_insertion_point(field_mutable:request_proto.TransactionInfo.timestamp)
  return _internal_mutable_timestamp();
}
inline const std::string& TransactionInfo::_internal_timestamp() const {
  return timestamp_.Get();
}
inline void TransactionInfo::_internal_set_timestamp(const std::string& value) {
  
  timestamp_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void TransactionInfo::set_timestamp(std::string&& value) {
  
  timestamp_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:request_proto.TransactionInfo.timestamp)
}
inline void TransactionInfo::set_timestamp(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  timestamp_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:request_proto.TransactionInfo.timestamp)
}
inline void TransactionInfo::set_timestamp(const char* value,
    size_t size) {
  
  timestamp_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:request_proto.TransactionInfo.timestamp)
}
inline std::string* TransactionInfo::_internal_mutable_timestamp() {
  
  return timestamp_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* TransactionInfo::release_timestamp() {
  // @@protoc_insertion_point(field_release:request_proto.TransactionInfo.timestamp)
  return timestamp_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void TransactionInfo::set_allocated_timestamp(std::string* timestamp) {
  if (timestamp != nullptr) {
    
  } else {
    
  }
  timestamp_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), timestamp,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:request_proto.TransactionInfo.timestamp)
}

// -------------------------------------------------------------------

// Version

// string block_number = 1;
inline void Version::clear_block_number() {
  block_number_.ClearToEmpty();
}
inline const std::string& Version::block_number() const {
  // @@protoc_insertion_point(field_get:request_proto.Version.block_number)
  return _internal_block_number();
}
inline void Version::set_block_number(const std::string& value) {
  _internal_set_block_number(value);
  // @@protoc_insertion_point(field_set:request_proto.Version.block_number)
}
inline std::string* Version::mutable_block_number() {
  // @@protoc_insertion_point(field_mutable:request_proto.Version.block_number)
  return _internal_mutable_block_number();
}
inline const std::string& Version::_internal_block_number() const {
  return block_number_.Get();
}
inline void Version::_internal_set_block_number(const std::string& value) {
  
  block_number_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Version::set_block_number(std::string&& value) {
  
  block_number_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:request_proto.Version.block_number)
}
inline void Version::set_block_number(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  block_number_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:request_proto.Version.block_number)
}
inline void Version::set_block_number(const char* value,
    size_t size) {
  
  block_number_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:request_proto.Version.block_number)
}
inline std::string* Version::_internal_mutable_block_number() {
  
  return block_number_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Version::release_block_number() {
  // @@protoc_insertion_point(field_release:request_proto.Version.block_number)
  return block_number_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Version::set_allocated_block_number(std::string* block_number) {
  if (block_number != nullptr) {
    
  } else {
    
  }
  block_number_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), block_number,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:request_proto.Version.block_number)
}

// string tx_id = 2;
inline void Version::clear_tx_id() {
  tx_id_.ClearToEmpty();
}
inline const std::string& Version::tx_id() const {
  // @@protoc_insertion_point(field_get:request_proto.Version.tx_id)
  return _internal_tx_id();
}
inline void Version::set_tx_id(const std::string& value) {
  _internal_set_tx_id(value);
  // @@protoc_insertion_point(field_set:request_proto.Version.tx_id)
}
inline std::string* Version::mutable_tx_id() {
  // @@protoc_insertion_point(field_mutable:request_proto.Version.tx_id)
  return _internal_mutable_tx_id();
}
inline const std::string& Version::_internal_tx_id() const {
  return tx_id_.Get();
}
inline void Version::_internal_set_tx_id(const std::string& value) {
  
  tx_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Version::set_tx_id(std::string&& value) {
  
  tx_id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:request_proto.Version.tx_id)
}
inline void Version::set_tx_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  tx_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:request_proto.Version.tx_id)
}
inline void Version::set_tx_id(const char* value,
    size_t size) {
  
  tx_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:request_proto.Version.tx_id)
}
inline std::string* Version::_internal_mutable_tx_id() {
  
  return tx_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Version::release_tx_id() {
  // @@protoc_insertion_point(field_release:request_proto.Version.tx_id)
  return tx_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Version::set_allocated_tx_id(std::string* tx_id) {
  if (tx_id != nullptr) {
    
  } else {
    
  }
  tx_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), tx_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:request_proto.Version.tx_id)
}

// -------------------------------------------------------------------

// TxWriteSet

// repeated .request_proto.Wset pb_wset = 1;
inline int TxWriteSet::_internal_pb_wset_size() const {
  return pb_wset_.size();
}
inline int TxWriteSet::pb_wset_size() const {
  return _internal_pb_wset_size();
}
inline void TxWriteSet::clear_pb_wset() {
  pb_wset_.Clear();
}
inline ::request_proto::Wset* TxWriteSet::mutable_pb_wset(int index) {
  // @@protoc_insertion_point(field_mutable:request_proto.TxWriteSet.pb_wset)
  return pb_wset_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::request_proto::Wset >*
TxWriteSet::mutable_pb_wset() {
  // @@protoc_insertion_point(field_mutable_list:request_proto.TxWriteSet.pb_wset)
  return &pb_wset_;
}
inline const ::request_proto::Wset& TxWriteSet::_internal_pb_wset(int index) const {
  return pb_wset_.Get(index);
}
inline const ::request_proto::Wset& TxWriteSet::pb_wset(int index) const {
  // @@protoc_insertion_point(field_get:request_proto.TxWriteSet.pb_wset)
  return _internal_pb_wset(index);
}
inline ::request_proto::Wset* TxWriteSet::_internal_add_pb_wset() {
  return pb_wset_.Add();
}
inline ::request_proto::Wset* TxWriteSet::add_pb_wset() {
  // @@protoc_insertion_point(field_add:request_proto.TxWriteSet.pb_wset)
  return _internal_add_pb_wset();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::request_proto::Wset >&
TxWriteSet::pb_wset() const {
  // @@protoc_insertion_point(field_list:request_proto.TxWriteSet.pb_wset)
  return pb_wset_;
}

// repeated .request_proto.Wset pv_wset = 2;
inline int TxWriteSet::_internal_pv_wset_size() const {
  return pv_wset_.size();
}
inline int TxWriteSet::pv_wset_size() const {
  return _internal_pv_wset_size();
}
inline void TxWriteSet::clear_pv_wset() {
  pv_wset_.Clear();
}
inline ::request_proto::Wset* TxWriteSet::mutable_pv_wset(int index) {
  // @@protoc_insertion_point(field_mutable:request_proto.TxWriteSet.pv_wset)
  return pv_wset_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::request_proto::Wset >*
TxWriteSet::mutable_pv_wset() {
  // @@protoc_insertion_point(field_mutable_list:request_proto.TxWriteSet.pv_wset)
  return &pv_wset_;
}
inline const ::request_proto::Wset& TxWriteSet::_internal_pv_wset(int index) const {
  return pv_wset_.Get(index);
}
inline const ::request_proto::Wset& TxWriteSet::pv_wset(int index) const {
  // @@protoc_insertion_point(field_get:request_proto.TxWriteSet.pv_wset)
  return _internal_pv_wset(index);
}
inline ::request_proto::Wset* TxWriteSet::_internal_add_pv_wset() {
  return pv_wset_.Add();
}
inline ::request_proto::Wset* TxWriteSet::add_pv_wset() {
  // @@protoc_insertion_point(field_add:request_proto.TxWriteSet.pv_wset)
  return _internal_add_pv_wset();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::request_proto::Wset >&
TxWriteSet::pv_wset() const {
  // @@protoc_insertion_point(field_list:request_proto.TxWriteSet.pv_wset)
  return pv_wset_;
}

// -------------------------------------------------------------------

// Wset

// string key = 1;
inline void Wset::clear_key() {
  key_.ClearToEmpty();
}
inline const std::string& Wset::key() const {
  // @@protoc_insertion_point(field_get:request_proto.Wset.key)
  return _internal_key();
}
inline void Wset::set_key(const std::string& value) {
  _internal_set_key(value);
  // @@protoc_insertion_point(field_set:request_proto.Wset.key)
}
inline std::string* Wset::mutable_key() {
  // @@protoc_insertion_point(field_mutable:request_proto.Wset.key)
  return _internal_mutable_key();
}
inline const std::string& Wset::_internal_key() const {
  return key_.Get();
}
inline void Wset::_internal_set_key(const std::string& value) {
  
  key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Wset::set_key(std::string&& value) {
  
  key_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:request_proto.Wset.key)
}
inline void Wset::set_key(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:request_proto.Wset.key)
}
inline void Wset::set_key(const char* value,
    size_t size) {
  
  key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:request_proto.Wset.key)
}
inline std::string* Wset::_internal_mutable_key() {
  
  return key_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Wset::release_key() {
  // @@protoc_insertion_point(field_release:request_proto.Wset.key)
  return key_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Wset::set_allocated_key(std::string* key) {
  if (key != nullptr) {
    
  } else {
    
  }
  key_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), key,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:request_proto.Wset.key)
}

// string value = 2;
inline void Wset::clear_value() {
  value_.ClearToEmpty();
}
inline const std::string& Wset::value() const {
  // @@protoc_insertion_point(field_get:request_proto.Wset.value)
  return _internal_value();
}
inline void Wset::set_value(const std::string& value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:request_proto.Wset.value)
}
inline std::string* Wset::mutable_value() {
  // @@protoc_insertion_point(field_mutable:request_proto.Wset.value)
  return _internal_mutable_value();
}
inline const std::string& Wset::_internal_value() const {
  return value_.Get();
}
inline void Wset::_internal_set_value(const std::string& value) {
  
  value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Wset::set_value(std::string&& value) {
  
  value_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:request_proto.Wset.value)
}
inline void Wset::set_value(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:request_proto.Wset.value)
}
inline void Wset::set_value(const char* value,
    size_t size) {
  
  value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:request_proto.Wset.value)
}
inline std::string* Wset::_internal_mutable_value() {
  
  return value_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Wset::release_value() {
  // @@protoc_insertion_point(field_release:request_proto.Wset.value)
  return value_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Wset::set_allocated_value(std::string* value) {
  if (value != nullptr) {
    
  } else {
    
  }
  value_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:request_proto.Wset.value)
}

// string name_space = 3;
inline void Wset::clear_name_space() {
  name_space_.ClearToEmpty();
}
inline const std::string& Wset::name_space() const {
  // @@protoc_insertion_point(field_get:request_proto.Wset.name_space)
  return _internal_name_space();
}
inline void Wset::set_name_space(const std::string& value) {
  _internal_set_name_space(value);
  // @@protoc_insertion_point(field_set:request_proto.Wset.name_space)
}
inline std::string* Wset::mutable_name_space() {
  // @@protoc_insertion_point(field_mutable:request_proto.Wset.name_space)
  return _internal_mutable_name_space();
}
inline const std::string& Wset::_internal_name_space() const {
  return name_space_.Get();
}
inline void Wset::_internal_set_name_space(const std::string& value) {
  
  name_space_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Wset::set_name_space(std::string&& value) {
  
  name_space_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:request_proto.Wset.name_space)
}
inline void Wset::set_name_space(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_space_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:request_proto.Wset.name_space)
}
inline void Wset::set_name_space(const char* value,
    size_t size) {
  
  name_space_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:request_proto.Wset.name_space)
}
inline std::string* Wset::_internal_mutable_name_space() {
  
  return name_space_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Wset::release_name_space() {
  // @@protoc_insertion_point(field_release:request_proto.Wset.name_space)
  return name_space_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Wset::set_allocated_name_space(std::string* name_space) {
  if (name_space != nullptr) {
    
  } else {
    
  }
  name_space_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name_space,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:request_proto.Wset.name_space)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace request_proto

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::request_proto::CProof_CSTATE> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::request_proto::CProof_CSTATE>() {
  return ::request_proto::CProof_CSTATE_descriptor();
}
template <> struct is_proto_enum< ::request_proto::Data_SOURCE> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::request_proto::Data_SOURCE>() {
  return ::request_proto::Data_SOURCE_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_Compliance_2eproto
