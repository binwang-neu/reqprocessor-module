// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Regulator.proto

#include "Regulator.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace request_proto {
constexpr ProofRequest::ProofRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : peer_signature_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , tx_info_(nullptr)
  , nonce_(PROTOBUF_ULONGLONG(0)){}
struct ProofRequestDefaultTypeInternal {
  constexpr ProofRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ProofRequestDefaultTypeInternal() {}
  union {
    ProofRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ProofRequestDefaultTypeInternal _ProofRequest_default_instance_;
constexpr ProofResponse::ProofResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : c_proof_(nullptr)
  , nonce_(PROTOBUF_ULONGLONG(0)){}
struct ProofResponseDefaultTypeInternal {
  constexpr ProofResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ProofResponseDefaultTypeInternal() {}
  union {
    ProofResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ProofResponseDefaultTypeInternal _ProofResponse_default_instance_;
}  // namespace request_proto
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_Regulator_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_Regulator_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_Regulator_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_Regulator_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::request_proto::ProofRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::request_proto::ProofRequest, nonce_),
  PROTOBUF_FIELD_OFFSET(::request_proto::ProofRequest, peer_signature_),
  PROTOBUF_FIELD_OFFSET(::request_proto::ProofRequest, tx_info_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::request_proto::ProofResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::request_proto::ProofResponse, nonce_),
  PROTOBUF_FIELD_OFFSET(::request_proto::ProofResponse, c_proof_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::request_proto::ProofRequest)},
  { 8, -1, sizeof(::request_proto::ProofResponse)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::request_proto::_ProofRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::request_proto::_ProofResponse_default_instance_),
};

const char descriptor_table_protodef_Regulator_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\017Regulator.proto\022\rrequest_proto\032\020Compli"
  "ance.proto\"f\n\014ProofRequest\022\r\n\005nonce\030\001 \001("
  "\004\022\026\n\016peer_signature\030\002 \001(\t\022/\n\007tx_info\030\003 \001"
  "(\0132\036.request_proto.TransactionInfo\"F\n\rPr"
  "oofResponse\022\r\n\005nonce\030\001 \001(\004\022&\n\007c_proof\030\002 "
  "\001(\0132\025.request_proto.CProof2b\n\tRegulator\022"
  "U\n\022GetComplianceProof\022\033.request_proto.Pr"
  "oofRequest\032\034.request_proto.ProofResponse"
  "\"\000(\0010\001b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_Regulator_2eproto_deps[1] = {
  &::descriptor_table_Compliance_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_Regulator_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_Regulator_2eproto = {
  false, false, 334, descriptor_table_protodef_Regulator_2eproto, "Regulator.proto", 
  &descriptor_table_Regulator_2eproto_once, descriptor_table_Regulator_2eproto_deps, 1, 2,
  schemas, file_default_instances, TableStruct_Regulator_2eproto::offsets,
  file_level_metadata_Regulator_2eproto, file_level_enum_descriptors_Regulator_2eproto, file_level_service_descriptors_Regulator_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK ::PROTOBUF_NAMESPACE_ID::Metadata
descriptor_table_Regulator_2eproto_metadata_getter(int index) {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Regulator_2eproto);
  return descriptor_table_Regulator_2eproto.file_level_metadata[index];
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_Regulator_2eproto(&descriptor_table_Regulator_2eproto);
namespace request_proto {

// ===================================================================

class ProofRequest::_Internal {
 public:
  static const ::request_proto::TransactionInfo& tx_info(const ProofRequest* msg);
};

const ::request_proto::TransactionInfo&
ProofRequest::_Internal::tx_info(const ProofRequest* msg) {
  return *msg->tx_info_;
}
void ProofRequest::clear_tx_info() {
  if (GetArena() == nullptr && tx_info_ != nullptr) {
    delete tx_info_;
  }
  tx_info_ = nullptr;
}
ProofRequest::ProofRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:request_proto.ProofRequest)
}
ProofRequest::ProofRequest(const ProofRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  peer_signature_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_peer_signature().empty()) {
    peer_signature_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_peer_signature(), 
      GetArena());
  }
  if (from._internal_has_tx_info()) {
    tx_info_ = new ::request_proto::TransactionInfo(*from.tx_info_);
  } else {
    tx_info_ = nullptr;
  }
  nonce_ = from.nonce_;
  // @@protoc_insertion_point(copy_constructor:request_proto.ProofRequest)
}

void ProofRequest::SharedCtor() {
peer_signature_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&tx_info_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&nonce_) -
    reinterpret_cast<char*>(&tx_info_)) + sizeof(nonce_));
}

ProofRequest::~ProofRequest() {
  // @@protoc_insertion_point(destructor:request_proto.ProofRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ProofRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  peer_signature_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete tx_info_;
}

void ProofRequest::ArenaDtor(void* object) {
  ProofRequest* _this = reinterpret_cast< ProofRequest* >(object);
  (void)_this;
}
void ProofRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ProofRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ProofRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:request_proto.ProofRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  peer_signature_.ClearToEmpty();
  if (GetArena() == nullptr && tx_info_ != nullptr) {
    delete tx_info_;
  }
  tx_info_ = nullptr;
  nonce_ = PROTOBUF_ULONGLONG(0);
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ProofRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 nonce = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          nonce_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string peer_signature = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_peer_signature();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "request_proto.ProofRequest.peer_signature"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .request_proto.TransactionInfo tx_info = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_tx_info(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ProofRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:request_proto.ProofRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 nonce = 1;
  if (this->nonce() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_nonce(), target);
  }

  // string peer_signature = 2;
  if (this->peer_signature().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_peer_signature().data(), static_cast<int>(this->_internal_peer_signature().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "request_proto.ProofRequest.peer_signature");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_peer_signature(), target);
  }

  // .request_proto.TransactionInfo tx_info = 3;
  if (this->has_tx_info()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::tx_info(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:request_proto.ProofRequest)
  return target;
}

size_t ProofRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:request_proto.ProofRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string peer_signature = 2;
  if (this->peer_signature().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_peer_signature());
  }

  // .request_proto.TransactionInfo tx_info = 3;
  if (this->has_tx_info()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *tx_info_);
  }

  // uint64 nonce = 1;
  if (this->nonce() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_nonce());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ProofRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:request_proto.ProofRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ProofRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ProofRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:request_proto.ProofRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:request_proto.ProofRequest)
    MergeFrom(*source);
  }
}

void ProofRequest::MergeFrom(const ProofRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:request_proto.ProofRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.peer_signature().size() > 0) {
    _internal_set_peer_signature(from._internal_peer_signature());
  }
  if (from.has_tx_info()) {
    _internal_mutable_tx_info()->::request_proto::TransactionInfo::MergeFrom(from._internal_tx_info());
  }
  if (from.nonce() != 0) {
    _internal_set_nonce(from._internal_nonce());
  }
}

void ProofRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:request_proto.ProofRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProofRequest::CopyFrom(const ProofRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:request_proto.ProofRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProofRequest::IsInitialized() const {
  return true;
}

void ProofRequest::InternalSwap(ProofRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  peer_signature_.Swap(&other->peer_signature_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ProofRequest, nonce_)
      + sizeof(ProofRequest::nonce_)
      - PROTOBUF_FIELD_OFFSET(ProofRequest, tx_info_)>(
          reinterpret_cast<char*>(&tx_info_),
          reinterpret_cast<char*>(&other->tx_info_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ProofRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ProofResponse::_Internal {
 public:
  static const ::request_proto::CProof& c_proof(const ProofResponse* msg);
};

const ::request_proto::CProof&
ProofResponse::_Internal::c_proof(const ProofResponse* msg) {
  return *msg->c_proof_;
}
void ProofResponse::clear_c_proof() {
  if (GetArena() == nullptr && c_proof_ != nullptr) {
    delete c_proof_;
  }
  c_proof_ = nullptr;
}
ProofResponse::ProofResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:request_proto.ProofResponse)
}
ProofResponse::ProofResponse(const ProofResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_c_proof()) {
    c_proof_ = new ::request_proto::CProof(*from.c_proof_);
  } else {
    c_proof_ = nullptr;
  }
  nonce_ = from.nonce_;
  // @@protoc_insertion_point(copy_constructor:request_proto.ProofResponse)
}

void ProofResponse::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&c_proof_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&nonce_) -
    reinterpret_cast<char*>(&c_proof_)) + sizeof(nonce_));
}

ProofResponse::~ProofResponse() {
  // @@protoc_insertion_point(destructor:request_proto.ProofResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ProofResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete c_proof_;
}

void ProofResponse::ArenaDtor(void* object) {
  ProofResponse* _this = reinterpret_cast< ProofResponse* >(object);
  (void)_this;
}
void ProofResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ProofResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ProofResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:request_proto.ProofResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && c_proof_ != nullptr) {
    delete c_proof_;
  }
  c_proof_ = nullptr;
  nonce_ = PROTOBUF_ULONGLONG(0);
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ProofResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 nonce = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          nonce_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .request_proto.CProof c_proof = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_c_proof(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ProofResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:request_proto.ProofResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 nonce = 1;
  if (this->nonce() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_nonce(), target);
  }

  // .request_proto.CProof c_proof = 2;
  if (this->has_c_proof()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::c_proof(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:request_proto.ProofResponse)
  return target;
}

size_t ProofResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:request_proto.ProofResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .request_proto.CProof c_proof = 2;
  if (this->has_c_proof()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *c_proof_);
  }

  // uint64 nonce = 1;
  if (this->nonce() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_nonce());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ProofResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:request_proto.ProofResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const ProofResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ProofResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:request_proto.ProofResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:request_proto.ProofResponse)
    MergeFrom(*source);
  }
}

void ProofResponse::MergeFrom(const ProofResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:request_proto.ProofResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_c_proof()) {
    _internal_mutable_c_proof()->::request_proto::CProof::MergeFrom(from._internal_c_proof());
  }
  if (from.nonce() != 0) {
    _internal_set_nonce(from._internal_nonce());
  }
}

void ProofResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:request_proto.ProofResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProofResponse::CopyFrom(const ProofResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:request_proto.ProofResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProofResponse::IsInitialized() const {
  return true;
}

void ProofResponse::InternalSwap(ProofResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ProofResponse, nonce_)
      + sizeof(ProofResponse::nonce_)
      - PROTOBUF_FIELD_OFFSET(ProofResponse, c_proof_)>(
          reinterpret_cast<char*>(&c_proof_),
          reinterpret_cast<char*>(&other->c_proof_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ProofResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace request_proto
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::request_proto::ProofRequest* Arena::CreateMaybeMessage< ::request_proto::ProofRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::request_proto::ProofRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::request_proto::ProofResponse* Arena::CreateMaybeMessage< ::request_proto::ProofResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::request_proto::ProofResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
