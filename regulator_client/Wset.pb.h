// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Wset.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_Wset_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_Wset_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3015000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3015002 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_Wset_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_Wset_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_Wset_2eproto;
::PROTOBUF_NAMESPACE_ID::Metadata descriptor_table_Wset_2eproto_metadata_getter(int index);
namespace wset {
class TxWriteSet;
struct TxWriteSetDefaultTypeInternal;
extern TxWriteSetDefaultTypeInternal _TxWriteSet_default_instance_;
class Wset;
struct WsetDefaultTypeInternal;
extern WsetDefaultTypeInternal _Wset_default_instance_;
}  // namespace wset
PROTOBUF_NAMESPACE_OPEN
template<> ::wset::TxWriteSet* Arena::CreateMaybeMessage<::wset::TxWriteSet>(Arena*);
template<> ::wset::Wset* Arena::CreateMaybeMessage<::wset::Wset>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace wset {

// ===================================================================

class TxWriteSet PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:wset.TxWriteSet) */ {
 public:
  inline TxWriteSet() : TxWriteSet(nullptr) {}
  virtual ~TxWriteSet();
  explicit constexpr TxWriteSet(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TxWriteSet(const TxWriteSet& from);
  TxWriteSet(TxWriteSet&& from) noexcept
    : TxWriteSet() {
    *this = ::std::move(from);
  }

  inline TxWriteSet& operator=(const TxWriteSet& from) {
    CopyFrom(from);
    return *this;
  }
  inline TxWriteSet& operator=(TxWriteSet&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TxWriteSet& default_instance() {
    return *internal_default_instance();
  }
  static inline const TxWriteSet* internal_default_instance() {
    return reinterpret_cast<const TxWriteSet*>(
               &_TxWriteSet_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(TxWriteSet& a, TxWriteSet& b) {
    a.Swap(&b);
  }
  inline void Swap(TxWriteSet* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TxWriteSet* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TxWriteSet* New() const final {
    return CreateMaybeMessage<TxWriteSet>(nullptr);
  }

  TxWriteSet* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TxWriteSet>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TxWriteSet& from);
  void MergeFrom(const TxWriteSet& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TxWriteSet* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "wset.TxWriteSet";
  }
  protected:
  explicit TxWriteSet(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_Wset_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPbWsetFieldNumber = 1,
    kPvWsetFieldNumber = 2,
  };
  // repeated .wset.Wset pb_wset = 1;
  int pb_wset_size() const;
  private:
  int _internal_pb_wset_size() const;
  public:
  void clear_pb_wset();
  ::wset::Wset* mutable_pb_wset(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::wset::Wset >*
      mutable_pb_wset();
  private:
  const ::wset::Wset& _internal_pb_wset(int index) const;
  ::wset::Wset* _internal_add_pb_wset();
  public:
  const ::wset::Wset& pb_wset(int index) const;
  ::wset::Wset* add_pb_wset();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::wset::Wset >&
      pb_wset() const;

  // repeated .wset.Wset pv_wset = 2;
  int pv_wset_size() const;
  private:
  int _internal_pv_wset_size() const;
  public:
  void clear_pv_wset();
  ::wset::Wset* mutable_pv_wset(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::wset::Wset >*
      mutable_pv_wset();
  private:
  const ::wset::Wset& _internal_pv_wset(int index) const;
  ::wset::Wset* _internal_add_pv_wset();
  public:
  const ::wset::Wset& pv_wset(int index) const;
  ::wset::Wset* add_pv_wset();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::wset::Wset >&
      pv_wset() const;

  // @@protoc_insertion_point(class_scope:wset.TxWriteSet)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::wset::Wset > pb_wset_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::wset::Wset > pv_wset_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Wset_2eproto;
};
// -------------------------------------------------------------------

class Wset PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:wset.Wset) */ {
 public:
  inline Wset() : Wset(nullptr) {}
  virtual ~Wset();
  explicit constexpr Wset(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Wset(const Wset& from);
  Wset(Wset&& from) noexcept
    : Wset() {
    *this = ::std::move(from);
  }

  inline Wset& operator=(const Wset& from) {
    CopyFrom(from);
    return *this;
  }
  inline Wset& operator=(Wset&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Wset& default_instance() {
    return *internal_default_instance();
  }
  static inline const Wset* internal_default_instance() {
    return reinterpret_cast<const Wset*>(
               &_Wset_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Wset& a, Wset& b) {
    a.Swap(&b);
  }
  inline void Swap(Wset* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Wset* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Wset* New() const final {
    return CreateMaybeMessage<Wset>(nullptr);
  }

  Wset* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Wset>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Wset& from);
  void MergeFrom(const Wset& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Wset* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "wset.Wset";
  }
  protected:
  explicit Wset(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_Wset_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKeyFieldNumber = 1,
    kValueFieldNumber = 2,
    kNameSpaceFieldNumber = 3,
  };
  // string key = 1;
  void clear_key();
  const std::string& key() const;
  void set_key(const std::string& value);
  void set_key(std::string&& value);
  void set_key(const char* value);
  void set_key(const char* value, size_t size);
  std::string* mutable_key();
  std::string* release_key();
  void set_allocated_key(std::string* key);
  private:
  const std::string& _internal_key() const;
  void _internal_set_key(const std::string& value);
  std::string* _internal_mutable_key();
  public:

  // string value = 2;
  void clear_value();
  const std::string& value() const;
  void set_value(const std::string& value);
  void set_value(std::string&& value);
  void set_value(const char* value);
  void set_value(const char* value, size_t size);
  std::string* mutable_value();
  std::string* release_value();
  void set_allocated_value(std::string* value);
  private:
  const std::string& _internal_value() const;
  void _internal_set_value(const std::string& value);
  std::string* _internal_mutable_value();
  public:

  // string name_space = 3;
  void clear_name_space();
  const std::string& name_space() const;
  void set_name_space(const std::string& value);
  void set_name_space(std::string&& value);
  void set_name_space(const char* value);
  void set_name_space(const char* value, size_t size);
  std::string* mutable_name_space();
  std::string* release_name_space();
  void set_allocated_name_space(std::string* name_space);
  private:
  const std::string& _internal_name_space() const;
  void _internal_set_name_space(const std::string& value);
  std::string* _internal_mutable_name_space();
  public:

  // @@protoc_insertion_point(class_scope:wset.Wset)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr key_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_space_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Wset_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// TxWriteSet

// repeated .wset.Wset pb_wset = 1;
inline int TxWriteSet::_internal_pb_wset_size() const {
  return pb_wset_.size();
}
inline int TxWriteSet::pb_wset_size() const {
  return _internal_pb_wset_size();
}
inline void TxWriteSet::clear_pb_wset() {
  pb_wset_.Clear();
}
inline ::wset::Wset* TxWriteSet::mutable_pb_wset(int index) {
  // @@protoc_insertion_point(field_mutable:wset.TxWriteSet.pb_wset)
  return pb_wset_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::wset::Wset >*
TxWriteSet::mutable_pb_wset() {
  // @@protoc_insertion_point(field_mutable_list:wset.TxWriteSet.pb_wset)
  return &pb_wset_;
}
inline const ::wset::Wset& TxWriteSet::_internal_pb_wset(int index) const {
  return pb_wset_.Get(index);
}
inline const ::wset::Wset& TxWriteSet::pb_wset(int index) const {
  // @@protoc_insertion_point(field_get:wset.TxWriteSet.pb_wset)
  return _internal_pb_wset(index);
}
inline ::wset::Wset* TxWriteSet::_internal_add_pb_wset() {
  return pb_wset_.Add();
}
inline ::wset::Wset* TxWriteSet::add_pb_wset() {
  // @@protoc_insertion_point(field_add:wset.TxWriteSet.pb_wset)
  return _internal_add_pb_wset();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::wset::Wset >&
TxWriteSet::pb_wset() const {
  // @@protoc_insertion_point(field_list:wset.TxWriteSet.pb_wset)
  return pb_wset_;
}

// repeated .wset.Wset pv_wset = 2;
inline int TxWriteSet::_internal_pv_wset_size() const {
  return pv_wset_.size();
}
inline int TxWriteSet::pv_wset_size() const {
  return _internal_pv_wset_size();
}
inline void TxWriteSet::clear_pv_wset() {
  pv_wset_.Clear();
}
inline ::wset::Wset* TxWriteSet::mutable_pv_wset(int index) {
  // @@protoc_insertion_point(field_mutable:wset.TxWriteSet.pv_wset)
  return pv_wset_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::wset::Wset >*
TxWriteSet::mutable_pv_wset() {
  // @@protoc_insertion_point(field_mutable_list:wset.TxWriteSet.pv_wset)
  return &pv_wset_;
}
inline const ::wset::Wset& TxWriteSet::_internal_pv_wset(int index) const {
  return pv_wset_.Get(index);
}
inline const ::wset::Wset& TxWriteSet::pv_wset(int index) const {
  // @@protoc_insertion_point(field_get:wset.TxWriteSet.pv_wset)
  return _internal_pv_wset(index);
}
inline ::wset::Wset* TxWriteSet::_internal_add_pv_wset() {
  return pv_wset_.Add();
}
inline ::wset::Wset* TxWriteSet::add_pv_wset() {
  // @@protoc_insertion_point(field_add:wset.TxWriteSet.pv_wset)
  return _internal_add_pv_wset();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::wset::Wset >&
TxWriteSet::pv_wset() const {
  // @@protoc_insertion_point(field_list:wset.TxWriteSet.pv_wset)
  return pv_wset_;
}

// -------------------------------------------------------------------

// Wset

// string key = 1;
inline void Wset::clear_key() {
  key_.ClearToEmpty();
}
inline const std::string& Wset::key() const {
  // @@protoc_insertion_point(field_get:wset.Wset.key)
  return _internal_key();
}
inline void Wset::set_key(const std::string& value) {
  _internal_set_key(value);
  // @@protoc_insertion_point(field_set:wset.Wset.key)
}
inline std::string* Wset::mutable_key() {
  // @@protoc_insertion_point(field_mutable:wset.Wset.key)
  return _internal_mutable_key();
}
inline const std::string& Wset::_internal_key() const {
  return key_.Get();
}
inline void Wset::_internal_set_key(const std::string& value) {
  
  key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Wset::set_key(std::string&& value) {
  
  key_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:wset.Wset.key)
}
inline void Wset::set_key(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:wset.Wset.key)
}
inline void Wset::set_key(const char* value,
    size_t size) {
  
  key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:wset.Wset.key)
}
inline std::string* Wset::_internal_mutable_key() {
  
  return key_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Wset::release_key() {
  // @@protoc_insertion_point(field_release:wset.Wset.key)
  return key_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Wset::set_allocated_key(std::string* key) {
  if (key != nullptr) {
    
  } else {
    
  }
  key_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), key,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:wset.Wset.key)
}

// string value = 2;
inline void Wset::clear_value() {
  value_.ClearToEmpty();
}
inline const std::string& Wset::value() const {
  // @@protoc_insertion_point(field_get:wset.Wset.value)
  return _internal_value();
}
inline void Wset::set_value(const std::string& value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:wset.Wset.value)
}
inline std::string* Wset::mutable_value() {
  // @@protoc_insertion_point(field_mutable:wset.Wset.value)
  return _internal_mutable_value();
}
inline const std::string& Wset::_internal_value() const {
  return value_.Get();
}
inline void Wset::_internal_set_value(const std::string& value) {
  
  value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Wset::set_value(std::string&& value) {
  
  value_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:wset.Wset.value)
}
inline void Wset::set_value(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:wset.Wset.value)
}
inline void Wset::set_value(const char* value,
    size_t size) {
  
  value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:wset.Wset.value)
}
inline std::string* Wset::_internal_mutable_value() {
  
  return value_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Wset::release_value() {
  // @@protoc_insertion_point(field_release:wset.Wset.value)
  return value_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Wset::set_allocated_value(std::string* value) {
  if (value != nullptr) {
    
  } else {
    
  }
  value_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:wset.Wset.value)
}

// string name_space = 3;
inline void Wset::clear_name_space() {
  name_space_.ClearToEmpty();
}
inline const std::string& Wset::name_space() const {
  // @@protoc_insertion_point(field_get:wset.Wset.name_space)
  return _internal_name_space();
}
inline void Wset::set_name_space(const std::string& value) {
  _internal_set_name_space(value);
  // @@protoc_insertion_point(field_set:wset.Wset.name_space)
}
inline std::string* Wset::mutable_name_space() {
  // @@protoc_insertion_point(field_mutable:wset.Wset.name_space)
  return _internal_mutable_name_space();
}
inline const std::string& Wset::_internal_name_space() const {
  return name_space_.Get();
}
inline void Wset::_internal_set_name_space(const std::string& value) {
  
  name_space_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Wset::set_name_space(std::string&& value) {
  
  name_space_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:wset.Wset.name_space)
}
inline void Wset::set_name_space(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_space_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:wset.Wset.name_space)
}
inline void Wset::set_name_space(const char* value,
    size_t size) {
  
  name_space_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:wset.Wset.name_space)
}
inline std::string* Wset::_internal_mutable_name_space() {
  
  return name_space_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Wset::release_name_space() {
  // @@protoc_insertion_point(field_release:wset.Wset.name_space)
  return name_space_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Wset::set_allocated_name_space(std::string* name_space) {
  if (name_space != nullptr) {
    
  } else {
    
  }
  name_space_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name_space,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:wset.Wset.name_space)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace wset

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_Wset_2eproto
