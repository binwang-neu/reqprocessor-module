// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Registration.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_Registration_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_Registration_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3015000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3015002 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_Registration_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_Registration_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_Registration_2eproto;
::PROTOBUF_NAMESPACE_ID::Metadata descriptor_table_Registration_2eproto_metadata_getter(int index);
namespace request_proto {
class Empty;
struct EmptyDefaultTypeInternal;
extern EmptyDefaultTypeInternal _Empty_default_instance_;
class RegisterInfo;
struct RegisterInfoDefaultTypeInternal;
extern RegisterInfoDefaultTypeInternal _RegisterInfo_default_instance_;
}  // namespace request_proto
PROTOBUF_NAMESPACE_OPEN
template<> ::request_proto::Empty* Arena::CreateMaybeMessage<::request_proto::Empty>(Arena*);
template<> ::request_proto::RegisterInfo* Arena::CreateMaybeMessage<::request_proto::RegisterInfo>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace request_proto {

// ===================================================================

class RegisterInfo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:request_proto.RegisterInfo) */ {
 public:
  inline RegisterInfo() : RegisterInfo(nullptr) {}
  virtual ~RegisterInfo();
  explicit constexpr RegisterInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RegisterInfo(const RegisterInfo& from);
  RegisterInfo(RegisterInfo&& from) noexcept
    : RegisterInfo() {
    *this = ::std::move(from);
  }

  inline RegisterInfo& operator=(const RegisterInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline RegisterInfo& operator=(RegisterInfo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RegisterInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const RegisterInfo* internal_default_instance() {
    return reinterpret_cast<const RegisterInfo*>(
               &_RegisterInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(RegisterInfo& a, RegisterInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(RegisterInfo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RegisterInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RegisterInfo* New() const final {
    return CreateMaybeMessage<RegisterInfo>(nullptr);
  }

  RegisterInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RegisterInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RegisterInfo& from);
  void MergeFrom(const RegisterInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RegisterInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "request_proto.RegisterInfo";
  }
  protected:
  explicit RegisterInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_Registration_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEccPubkeyFieldNumber = 1,
    kTxIdFieldNumber = 2,
  };
  // string ecc_pubkey = 1;
  void clear_ecc_pubkey();
  const std::string& ecc_pubkey() const;
  void set_ecc_pubkey(const std::string& value);
  void set_ecc_pubkey(std::string&& value);
  void set_ecc_pubkey(const char* value);
  void set_ecc_pubkey(const char* value, size_t size);
  std::string* mutable_ecc_pubkey();
  std::string* release_ecc_pubkey();
  void set_allocated_ecc_pubkey(std::string* ecc_pubkey);
  private:
  const std::string& _internal_ecc_pubkey() const;
  void _internal_set_ecc_pubkey(const std::string& value);
  std::string* _internal_mutable_ecc_pubkey();
  public:

  // string tx_id = 2;
  void clear_tx_id();
  const std::string& tx_id() const;
  void set_tx_id(const std::string& value);
  void set_tx_id(std::string&& value);
  void set_tx_id(const char* value);
  void set_tx_id(const char* value, size_t size);
  std::string* mutable_tx_id();
  std::string* release_tx_id();
  void set_allocated_tx_id(std::string* tx_id);
  private:
  const std::string& _internal_tx_id() const;
  void _internal_set_tx_id(const std::string& value);
  std::string* _internal_mutable_tx_id();
  public:

  // @@protoc_insertion_point(class_scope:request_proto.RegisterInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ecc_pubkey_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr tx_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Registration_2eproto;
};
// -------------------------------------------------------------------

class Empty PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:request_proto.Empty) */ {
 public:
  inline Empty() : Empty(nullptr) {}
  virtual ~Empty();
  explicit constexpr Empty(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Empty(const Empty& from);
  Empty(Empty&& from) noexcept
    : Empty() {
    *this = ::std::move(from);
  }

  inline Empty& operator=(const Empty& from) {
    CopyFrom(from);
    return *this;
  }
  inline Empty& operator=(Empty&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Empty& default_instance() {
    return *internal_default_instance();
  }
  static inline const Empty* internal_default_instance() {
    return reinterpret_cast<const Empty*>(
               &_Empty_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Empty& a, Empty& b) {
    a.Swap(&b);
  }
  inline void Swap(Empty* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Empty* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Empty* New() const final {
    return CreateMaybeMessage<Empty>(nullptr);
  }

  Empty* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Empty>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Empty& from);
  void MergeFrom(const Empty& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Empty* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "request_proto.Empty";
  }
  protected:
  explicit Empty(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_Registration_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNonceFieldNumber = 1,
  };
  // uint64 nonce = 1;
  void clear_nonce();
  ::PROTOBUF_NAMESPACE_ID::uint64 nonce() const;
  void set_nonce(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_nonce() const;
  void _internal_set_nonce(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:request_proto.Empty)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint64 nonce_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Registration_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// RegisterInfo

// string ecc_pubkey = 1;
inline void RegisterInfo::clear_ecc_pubkey() {
  ecc_pubkey_.ClearToEmpty();
}
inline const std::string& RegisterInfo::ecc_pubkey() const {
  // @@protoc_insertion_point(field_get:request_proto.RegisterInfo.ecc_pubkey)
  return _internal_ecc_pubkey();
}
inline void RegisterInfo::set_ecc_pubkey(const std::string& value) {
  _internal_set_ecc_pubkey(value);
  // @@protoc_insertion_point(field_set:request_proto.RegisterInfo.ecc_pubkey)
}
inline std::string* RegisterInfo::mutable_ecc_pubkey() {
  // @@protoc_insertion_point(field_mutable:request_proto.RegisterInfo.ecc_pubkey)
  return _internal_mutable_ecc_pubkey();
}
inline const std::string& RegisterInfo::_internal_ecc_pubkey() const {
  return ecc_pubkey_.Get();
}
inline void RegisterInfo::_internal_set_ecc_pubkey(const std::string& value) {
  
  ecc_pubkey_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void RegisterInfo::set_ecc_pubkey(std::string&& value) {
  
  ecc_pubkey_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:request_proto.RegisterInfo.ecc_pubkey)
}
inline void RegisterInfo::set_ecc_pubkey(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  ecc_pubkey_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:request_proto.RegisterInfo.ecc_pubkey)
}
inline void RegisterInfo::set_ecc_pubkey(const char* value,
    size_t size) {
  
  ecc_pubkey_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:request_proto.RegisterInfo.ecc_pubkey)
}
inline std::string* RegisterInfo::_internal_mutable_ecc_pubkey() {
  
  return ecc_pubkey_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* RegisterInfo::release_ecc_pubkey() {
  // @@protoc_insertion_point(field_release:request_proto.RegisterInfo.ecc_pubkey)
  return ecc_pubkey_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void RegisterInfo::set_allocated_ecc_pubkey(std::string* ecc_pubkey) {
  if (ecc_pubkey != nullptr) {
    
  } else {
    
  }
  ecc_pubkey_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ecc_pubkey,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:request_proto.RegisterInfo.ecc_pubkey)
}

// string tx_id = 2;
inline void RegisterInfo::clear_tx_id() {
  tx_id_.ClearToEmpty();
}
inline const std::string& RegisterInfo::tx_id() const {
  // @@protoc_insertion_point(field_get:request_proto.RegisterInfo.tx_id)
  return _internal_tx_id();
}
inline void RegisterInfo::set_tx_id(const std::string& value) {
  _internal_set_tx_id(value);
  // @@protoc_insertion_point(field_set:request_proto.RegisterInfo.tx_id)
}
inline std::string* RegisterInfo::mutable_tx_id() {
  // @@protoc_insertion_point(field_mutable:request_proto.RegisterInfo.tx_id)
  return _internal_mutable_tx_id();
}
inline const std::string& RegisterInfo::_internal_tx_id() const {
  return tx_id_.Get();
}
inline void RegisterInfo::_internal_set_tx_id(const std::string& value) {
  
  tx_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void RegisterInfo::set_tx_id(std::string&& value) {
  
  tx_id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:request_proto.RegisterInfo.tx_id)
}
inline void RegisterInfo::set_tx_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  tx_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:request_proto.RegisterInfo.tx_id)
}
inline void RegisterInfo::set_tx_id(const char* value,
    size_t size) {
  
  tx_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:request_proto.RegisterInfo.tx_id)
}
inline std::string* RegisterInfo::_internal_mutable_tx_id() {
  
  return tx_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* RegisterInfo::release_tx_id() {
  // @@protoc_insertion_point(field_release:request_proto.RegisterInfo.tx_id)
  return tx_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void RegisterInfo::set_allocated_tx_id(std::string* tx_id) {
  if (tx_id != nullptr) {
    
  } else {
    
  }
  tx_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), tx_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:request_proto.RegisterInfo.tx_id)
}

// -------------------------------------------------------------------

// Empty

// uint64 nonce = 1;
inline void Empty::clear_nonce() {
  nonce_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Empty::_internal_nonce() const {
  return nonce_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Empty::nonce() const {
  // @@protoc_insertion_point(field_get:request_proto.Empty.nonce)
  return _internal_nonce();
}
inline void Empty::_internal_set_nonce(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  nonce_ = value;
}
inline void Empty::set_nonce(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_nonce(value);
  // @@protoc_insertion_point(field_set:request_proto.Empty.nonce)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace request_proto

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_Registration_2eproto
